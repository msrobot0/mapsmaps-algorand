import { types as rtypes } from "@algo-builder/runtime";
import { Algodv2, LogicSigAccount, MultisigMetadata } from "algosdk";
import type { ASCCache, SCParams } from "../types";
/**
 * Make logic signature from result
 * @param result : ASC cache (contains filename, hash, tealcode ..etc)
 */
export declare function _lsigFromRes(result: ASCCache): Promise<LogicSigAccount>;
/**
 * Make logic signature from .teal file
 * @param name : ASC filename
 * @param algodClient : algodClient
 * @param scTmplParams: Smart contract template parameters (used only when compiling PyTEAL to TEAL)
 */
export declare function getLsig(name: string, algodClient: Algodv2, scTmplParams?: SCParams): Promise<LogicSigAccount>;
/**
 * Make logic signature from "cached" teal code
 * @param name : ASC filename
 */
export declare function getLsigFromCache(filename: string): Promise<LogicSigAccount>;
/**
 * Create and return a dummy logic signature
 */
export declare function getDummyLsig(): LogicSigAccount;
/**
 * Appends signature (using signer's sk) to multi-signed logic signature. If multisig is not found
 * then new multisig is created
 * eg. appending own signature to a signed lsig (received from multisignature account address network)
 * @param lsig Logic Sig object
 * @param signer: Signer Account which will sign the smart contract
 * @param mparams: passed when signing a new multisig
 * @returns multi signed logic signature (with appended signature using signer's sk)
 */
export declare function signLogicSigMultiSig(lsigAccount: LogicSigAccount, signer: rtypes.Account, mparams?: MultisigMetadata): LogicSigAccount;
