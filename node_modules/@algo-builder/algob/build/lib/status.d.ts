import { AccountAddress, Deployer, Key, StateValue } from "../types";
/**
 * Returns `account` balance of `assetID`. Returns 0 if the account has not
 * opt-in to the given asset id.
 * @param deployer algob deployer
 * @param accountAddress account to return assetholding info
 * @param assetID asset index
 */
export declare function balanceOf(deployer: Deployer, accountAddress: AccountAddress, assetID: number): Promise<number | bigint>;
/**
 * fetches and returns the global state of application.
 * @param deployer Deployer
 * @param creator Account from which call needs to be made
 * @param appID ID of the application being configured or empty if creating
 */
export declare function readAppGlobalState(deployer: Deployer, creator: AccountAddress, appID: number): Promise<Map<Key, StateValue> | undefined>;
/**
 * Read and return the local state of application from an account.
 * @param deployer Deployer
 * @param account account from the which the local state has to be read
 * @param appID ID of the application being configured or empty if creating
 */
export declare function readAppLocalState(deployer: Deployer, account: AccountAddress, appID: number): Promise<Map<Key, StateValue> | undefined>;
/**
 * Prints account asset holdings and ALGO balance (in microalgos)
 * @param deployer algob deployer object
 * @param account account whose asset holding to print
 */
export declare function printAssets(deployer: Deployer, account: string): Promise<void>;
/**
 * print account's local state of a stateful smart contract
 * @param deployer algob deployer
 * @param accountAddr account address to print local state
 * @param appID application index of smart contract
 */
export declare function printLocalStateSSC(deployer: Deployer, accountAddr: AccountAddress, appID: number): Promise<void>;
/**
 * print global state of a stateful smart contract
 * @param deployer algob deployer
 * @param creatorAddr creator address of stateful smart contract
 * @param appID application index of smart contract
 */
export declare function printGlobalStateSSC(deployer: Deployer, creatorAddr: AccountAddress, appID: number): Promise<void>;
