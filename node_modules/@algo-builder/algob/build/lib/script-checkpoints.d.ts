import { types as rtypes } from "@algo-builder/runtime";
import { types as wtypes } from "@algo-builder/web";
import { Transaction } from "algosdk";
import { AssetScriptMap, Checkpoint, CheckpointFunctions, CheckpointRepo, Checkpoints, Deployer, LsigInfo, Timestamp } from "../types";
export declare const scriptsDirectory = "scripts";
export declare const testsDirectory = "test";
export declare function toCheckpointFileName(scriptName: string): string;
export declare function toScriptFileName(filename: string): string;
export declare class CheckpointImpl implements Checkpoint {
    timestamp: number;
    metadata: Map<string, string>;
    asa: Map<string, rtypes.ASAInfo>;
    ssc: Map<string, Map<Timestamp, rtypes.SSCInfo>>;
    dLsig: Map<string, LsigInfo>;
    constructor(metadata?: Map<string, string>);
}
export declare function appendToCheckpoint(checkpoints: Checkpoints, networkName: string, append: Checkpoint): Checkpoints;
export declare class CheckpointRepoImpl implements CheckpointRepo {
    strippedCP: Checkpoints;
    precedingCP: Checkpoints;
    allCPs: Checkpoints;
    scriptMap: AssetScriptMap;
    private _mergeTo;
    merge(cp: Checkpoints, scriptName: string): CheckpointRepo;
    mergeToGlobal(cp: Checkpoints, scriptName: string): CheckpointRepo;
    private _ensureNet;
    putMetadata(networkName: string, key: string, value: string): CheckpointRepo;
    getMetadata(networkName: string, key: string): string | undefined;
    registerASA(networkName: string, name: string, info: rtypes.ASAInfo): CheckpointRepo;
    private _ensureRegister;
    registerSSC(networkName: string, name: string, info: rtypes.SSCInfo): CheckpointRepo;
    registerLsig(networkName: string, name: string, info: LsigInfo): CheckpointRepo;
    isDefined(networkName: string, name: string): boolean;
    networkExistsInCurrentCP(networkName: string): boolean;
}
export declare function persistCheckpoint(scriptName: string, checkpoint: Checkpoints): void;
/**
 * Register checkpoints for ASA and SSC
 * @param deployer Deployer object
 * @param txns transaction array
 * @param txIdxMap transaction map: to match transaction order
 * transaction index mapped to [asset name, asset definition]
 */
export declare function registerCheckpoints(deployer: Deployer, txns: Transaction[], txIdxMap: Map<number, [string, wtypes.ASADef]>): Promise<void>;
export declare function toMap<T>(obj: {
    [name: string]: T;
}): Map<string, T>;
export declare function toSSCMap<T>(obj: {
    [name: string]: {
        [timestamp: string]: T;
    };
}): Map<string, Map<Timestamp, T>>;
export declare function loadCheckpointByCPName(checkpointName: string): Checkpoints;
export declare function loadCheckpoint(scriptName: string): Checkpoints;
export declare function lsScriptsDir(): string[];
export declare function loadCheckpointsRecursive(): CheckpointRepo;
export declare function loadCheckpointsIntoCPData(cpData: CheckpointRepo, scriptPaths: string[]): CheckpointRepo;
export declare class CheckpointFunctionsImpl implements CheckpointFunctions {
    protected readonly cpData: CheckpointRepo;
    protected readonly networkName: string;
    constructor(cpData: CheckpointRepo, networkName: string);
    /**
     * Queries a stateful smart contract info from checkpoint using key.
     * @param key Key here is clear program name appended to approval program name
     * with hypen("-") in between (approvalProgramName-clearProgramName)
     */
    getAppfromCPKey(key: string): rtypes.SSCInfo | undefined;
    /**
     * Returns SSC checkpoint key using application index,
     * returns undefined if it doesn't exist
     * @param index Application index
     */
    getAppCheckpointKeyFromIndex(index: number): string | undefined;
    /**
     * Returns ASA checkpoint key using asset index,
     * returns undefined if it doesn't exist
     * @param index Asset Index
     */
    getAssetCheckpointKeyFromIndex(index: number): string | undefined;
    /**
     * Returns latest timestamp value from map
     * @param map Map
     */
    getLatestTimestampValue(map: Map<number, rtypes.SSCInfo>): number;
}
