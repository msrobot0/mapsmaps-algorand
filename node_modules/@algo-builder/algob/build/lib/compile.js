"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompileOp = exports.lsigExt = exports.pyExt = exports.tealExt = void 0;
const runtime_1 = require("@algo-builder/runtime");
const web_1 = require("@algo-builder/web");
const fs = __importStar(require("fs"));
const murmurhash = __importStar(require("murmurhash"));
const path = __importStar(require("path"));
const yaml_1 = __importDefault(require("yaml"));
const project_structure_1 = require("../internal/core/project-structure");
const time_1 = require("../lib/time");
exports.tealExt = ".teal";
exports.pyExt = ".py";
exports.lsigExt = ".lsig";
class CompileOp {
    constructor(algocl) {
        this.cacheAssured = false;
        this.algocl = algocl;
        this.pyCompile = new runtime_1.PyCompileOp();
    }
    /** Gets the TEAL compiled result from artifacts cache and compiles the code if necessary.
     * Will throw an exception if the source file doesn't exists.
     * @param filename: name of the TEAL code in `/assets` directory.
     *   (Examples: `mysc.teal, security/rbac.teal`)
     *   MUST have a .teal, .lsig or .py extension
     * @param force: if true it will force recompilation even if the cache is up to date.
     * @param scTmplParams: Smart contract template parameters (used only when compiling PyTEAL to TEAL)
     */
    async ensureCompiled(filename, force, scTmplParams) {
        if (!filename.endsWith(exports.tealExt) && !filename.endsWith(exports.lsigExt) && !filename.endsWith(exports.pyExt)) {
            throw new Error(`filename "${filename}" must end with "${exports.tealExt}" or "${exports.lsigExt}" or "${exports.pyExt}"`); // TODO: convert to buildererror
        }
        if (force === undefined) {
            force = false;
        }
        const filePath = (0, runtime_1.getPathFromDirRecursive)(project_structure_1.ASSETS_DIR, filename);
        if (filePath === undefined) {
            throw new web_1.BuilderError(runtime_1.ERRORS.GENERAL.FILE_NOT_FOUND_IN_DIR, {
                directory: project_structure_1.ASSETS_DIR, file: filename
            });
        }
        let teal;
        let thash;
        if (filename.endsWith(exports.pyExt)) {
            const content = this.pyCompile.ensurePyTEALCompiled(filename, scTmplParams);
            [teal, thash] = [content, murmurhash.v3(content)];
        }
        else {
            [teal, thash] = this.readTealAndHash(filePath);
        }
        let a = await this.readArtifact(filename);
        if (!force && a !== undefined && a.srcHash === thash) {
            // '\x1b[33m%s\x1b[0m' for yellow color warning
            console.warn('\x1b[33m%s\x1b[0m', `smart-contract source "${filename}" didn't change, skipping.`);
            return a;
        }
        console.log("compiling", filename);
        a = await this.compile(filename, teal, thash);
        const cacheFilename = path.join(project_structure_1.CACHE_DIR, filename + ".yaml");
        this.writeFile(cacheFilename, yaml_1.default.stringify(a));
        return a;
    }
    // returns teal code, hash extracted from dissembled .lsig file (part above `LogicSig: `)
    // {refer - /assets/sample-text-asc.lsig}
    // returns teal code(whole file content) along with hash if extension is .teal
    readTealAndHash(filename) {
        const content = fs.readFileSync(filename, 'utf8');
        if (filename.endsWith(exports.lsigExt)) {
            const teal = content.split("LogicSig: ")[0];
            return [teal, murmurhash.v3(content)];
        }
        return [content, murmurhash.v3(content)];
    }
    async readArtifact(filename) {
        await (0, project_structure_1.assertDir)(project_structure_1.CACHE_DIR);
        try {
            const p = path.join(project_structure_1.CACHE_DIR, filename + ".yaml");
            return yaml_1.default.parse(await fs.promises.readFile(p, 'utf8'));
        }
        catch (e) {
            if (web_1.types.isFileError(e) && e?.errno === -2) {
                return undefined;
            } // handling a not existing file
            throw e;
        }
    }
    callCompiler(code) {
        return this.algocl.compile(code).do();
    }
    async compile(filename, tealCode, tealHash) {
        try {
            const co = await this.callCompiler(tealCode);
            const result = {
                filename: filename,
                timestamp: (0, time_1.timestampNow)(),
                compiled: co.result,
                compiledHash: co.hash,
                srcHash: tealHash,
                // compiled base64 converted into bytes
                base64ToBytes: new Uint8Array(Buffer.from(co.result, "base64"))
            };
            return filename.endsWith(exports.pyExt) ? { ...result, tealCode: tealCode } : result;
        }
        catch (e) {
            if (web_1.types.isRequestError(e)) {
                throw (0, web_1.parseAlgorandError)(e, { filename: filename });
            }
            throw e;
        }
    }
    writeFile(filename, content) {
        fs.writeFileSync(filename, content);
    }
}
exports.CompileOp = CompileOp;
//# sourceMappingURL=compile.js.map