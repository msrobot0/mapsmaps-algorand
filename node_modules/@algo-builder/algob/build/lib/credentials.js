"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KMDCredentialsFromEnv = exports.algodCredentialsFromEnv = void 0;
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
function algodCredentialsFromEnv() {
    const token = process.env.ALGOD_TOKEN;
    const algodAddr = process.env.ALGOD_ADDR;
    if (token === undefined && algodAddr === undefined) {
        const algoData = process.env.ALGORAND_DATA;
        if (algoData === undefined) {
            throw new Error("Either Algod Credentials or ALGORAND_DATA must be defined as an environment variable");
        }
        const loadToken = fs.readFileSync(path_1.default.join(algoData, "algod.token"), 'utf8');
        const loadNet = fs.readFileSync(path_1.default.join(algoData, "algod.net"), 'utf8');
        const arr = loadNet.toString().split(':');
        return {
            host: arr[0],
            port: +arr[1],
            token: loadToken.toString()
        };
    }
    else if (token === undefined || algodAddr === undefined) {
        throw new Error("Both Algod Token and Algod Address should be defined in env");
    }
    const arr = algodAddr.split(':');
    return { host: arr[0], port: +arr[1], token: token };
}
exports.algodCredentialsFromEnv = algodCredentialsFromEnv;
function KMDCredentialsFromEnv() {
    const token = process.env.KMD_TOKEN;
    const kmdAddr = process.env.KMD_ADDR;
    if (token === undefined && kmdAddr === undefined) {
        const kmdData = process.env.$KMD_DATA;
        if (kmdData === undefined) {
            throw new Error("Either KMD Credentials or $KMD_DATA should be defined in env");
        }
        const loadToken = fs.readFileSync(path_1.default.join(kmdData, "kmd.token"), 'utf8');
        const loadNet = fs.readFileSync(path_1.default.join(kmdData, "kmd.net"), 'utf8');
        const arr = loadNet.toString().split(':');
        return {
            host: arr[0],
            port: +arr[1],
            token: loadToken.toString()
        };
    }
    else if (token === undefined || kmdAddr === undefined) {
        throw new Error("Both KMD Token and KMD Address should be defined in env");
    }
    const arr = kmdAddr.split(':');
    return { host: arr[0], port: +arr[1], token: token };
}
exports.KMDCredentialsFromEnv = KMDCredentialsFromEnv;
//# sourceMappingURL=credentials.js.map