import { Account, EncodedMultisig, MultisigMetadata } from "algosdk";
import { LogicSig } from "../types";
export declare const blsigExt = ".blsig";
/**
 * This function decodes msig object from logic signature
 * @param {String} name : multisig filename
 * @returns {MultiSig} : decoded msig (object with decoded public keys and their signatures)
 */
export declare function decodeMsigObj(msig: string): Promise<EncodedMultisig>;
/**
 * This function reads multisig from /assets/<filename>.lsig
 *              and returns the decoded multisig object
 * @param {string} msig : multisigned msig obj
 * @returns {MultiSig} : decoded Msig Object
 */
export declare function readMsigFromFile(filename: string): Promise<EncodedMultisig | undefined>;
/**
 * This function reads raw multisig from /assets/<filename>.lsig
 * and returns the base64 string
 * @param {string} filename : filename [must have .blsig ext]
 * @returns {string} : base64 string
 */
export declare function readBinaryMultiSig(filename: string): Promise<string | undefined>;
/**
 * Loads signed logic signature directly from .blsig file
 * @param {string} name filename
 * @returns {LogicSig} signed logic signature from assets/<file_name>.blsig
 */
export declare function loadBinaryLsig(name: string): Promise<LogicSig>;
/**
 * Validates msig by checking for v and thr field
 * @param {MultiSig} msig
 */
export declare function validateMsig(msig: EncodedMultisig | undefined): void;
/**
 * Signs a raw multi-sig transaction object
 * @param signerAccount account(addr, sk) to sign the transaction
 * @param rawTxn encoded transaction fetched from file in /assets
 * @param mparams multisig metadata. Required if creating a new signed multisig transaction.
 * @returns signed transaction object
 */
export declare function signMultiSig(signerAccount: Account, rawTxn: Uint8Array, mparams?: MultisigMetadata): {
    txID: string;
    blob: Uint8Array;
};
