import { types as rtypes } from "@algo-builder/runtime";
import { Kmd, MultisigMetadata } from "algosdk";
import { ErrorPutter } from "../internal/core/config/config-errors";
import type { AccountDef, KmdCfg, KmdWallet, StrMap } from "../types";
/**
 * Returns an array of SDK accounts (addr, sk) */
export declare function mkAccounts(input: AccountDef[]): rtypes.Account[];
/**
 * Loads accounts from `filename`. The file should be a YAML file with list of objects
 * which is either `HDAccount`, `MnemonicAccount` or an `Account`.
 * @param filename file to load accounts from
 */
export declare function loadAccountsFromFile(filename: string): Promise<rtypes.Account[]>;
/**
 * Same as `loadAccountsFromFile` but uses sync method instead of async
 * @param filename file to load accounts from
 */
export declare function loadAccountsFromFileSync(filename: string): rtypes.Account[];
export declare function validateAccount(a: rtypes.Account, errs: ErrorPutter): boolean;
export declare function mkAccountIndex(accountList: rtypes.Account[]): rtypes.AccountMap;
/**
 * load accounts from environment in node.js (set in process.ENV)
 */
export declare function loadAccountsFromEnv(): rtypes.Account[];
/**
 * returns multisignature account address
 * @param version version of msig
 * @param threshold represents min no. of signatures for a tx to be approved
 * @param accountList account address of multisig (note: order is important)
 * @returns multisig metadata ({v: .., thr: .., addr: ..}) and the multisig addresses
 */
export declare function createMsigAddress(version: number, threshold: number, accountList: string[]): [MultisigMetadata, string];
export declare class KMDOperator {
    kmdcl: Kmd;
    constructor(kmdcl: Kmd);
    kmdWalletAddrNames(kwallet: KmdWallet): StrMap;
    loadKMDAccounts(kcfg: KmdCfg): Promise<rtypes.Account[]>;
}
