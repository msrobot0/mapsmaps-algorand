import { PyCompileOp } from "@algo-builder/runtime";
import type { Algodv2, modelsv2 } from "algosdk";
import type { ASCCache, PyASCCache, SCParams } from "../types";
export declare const tealExt = ".teal";
export declare const pyExt = ".py";
export declare const lsigExt = ".lsig";
export declare class CompileOp {
    algocl: Algodv2;
    pyCompile: PyCompileOp;
    cacheAssured: boolean;
    constructor(algocl: Algodv2);
    /** Gets the TEAL compiled result from artifacts cache and compiles the code if necessary.
     * Will throw an exception if the source file doesn't exists.
     * @param filename: name of the TEAL code in `/assets` directory.
     *   (Examples: `mysc.teal, security/rbac.teal`)
     *   MUST have a .teal, .lsig or .py extension
     * @param force: if true it will force recompilation even if the cache is up to date.
     * @param scTmplParams: Smart contract template parameters (used only when compiling PyTEAL to TEAL)
     */
    ensureCompiled(filename: string, force?: boolean, scTmplParams?: SCParams): Promise<ASCCache | PyASCCache>;
    readTealAndHash(filename: string): [string, number];
    readArtifact(filename: string): Promise<ASCCache | undefined>;
    callCompiler(code: string): Promise<modelsv2.CompileResponse>;
    compile(filename: string, tealCode: string, tealHash: number): Promise<ASCCache | PyASCCache>;
    writeFile(filename: string, content: string): void;
}
