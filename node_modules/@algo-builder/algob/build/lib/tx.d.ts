import { types as rtypes } from "@algo-builder/runtime";
import { types as wtypes } from "@algo-builder/web";
import { SuggestedParams, Transaction } from "algosdk";
import { ConfirmedTxInfo, Deployer } from "../types";
/**
 * Returns true if encoded transaction (fetched from file) is already signed
 * @param encodedTx msgpack encoded transaction */
export declare function isSignedTx(encodedTx: Uint8Array): boolean;
/**
 * Returns SDK transaction object for ASA creation
 * @param name asset name
 * @param asaDef asset definition (passed in `/assets/asa.yaml)
 * @param flags basic transaction flags like `feePerByte`, `totalFee`, etc
 * @param txSuggestedParams suggested transaction params
 */
export declare function makeAssetCreateTxn(name: string, asaDef: wtypes.ASADef, flags: rtypes.ASADeploymentFlags, txSuggestedParams: SuggestedParams): Transaction;
/**
 * Returns SDK transaction object for ASA Opt-In operation
 * @param addr the address of the user to be opted-in
 * @param assetID the unique asset ID for which the opt-in transaction will be performed
 * @param params suggested transaction params
 */
export declare function makeASAOptInTx(addr: string, assetID: number, params: SuggestedParams, payFlags: wtypes.TxParams): Transaction;
/**
 * Create and Sign SDK transaction(s) from transaction execution parameters (passed by user).
 * @param deployer Deployer object
 * @param execParams Execution parameters
 * @param txIdxMap Map for index to [cpname, asaDef]
 * @returns [transaction(s), signed transaction(s)]
 */
export declare function makeAndSignTx(deployer: Deployer, execParams: wtypes.ExecParams | wtypes.ExecParams[], txIdxMap: Map<number, [string, wtypes.ASADef]>): Promise<[Transaction[], Uint8Array | Uint8Array[]]>;
/**
 * Signs transaction object(s) and returns raw signed transaction
 * Note: `signTransaction` is used to sign single transaction and `signTransactions` takes
 * array of SDK transaction object with signers, signs it.
 * @param txnAndSign Transaction object(s) with signers
 */
export declare function signTransactions(txnAndSign: wtypes.TransactionAndSign[]): Uint8Array[];
/**
 * Execute single transaction or group of transactions (atomic transaction)
 * executes `ExecParams` or `Transaction` Object, SDK Transaction object passed to this function
 * will be signed and sent to network. User can use SDK functions to create transactions.
 * Note: If passing transaction object a signer/s must be provided.
 * @param deployer Deployer
 * @param transactionParam transaction parameters or atomic transaction parameters
 * https://github.com/scale-it/algo-builder/blob/docs/docs/guide/execute-transaction.md
 * or TransactionAndSign object(SDK transaction object and signer parameters)
 */
export declare function executeTransaction(deployer: Deployer, transactions: (wtypes.ExecParams | wtypes.TransactionAndSign) | (wtypes.ExecParams[] | wtypes.TransactionAndSign[])): Promise<ConfirmedTxInfo>;
/**
 * Decode signed txn from file and send to network.
 * probably won't work, because transaction contains fields like
 * firstValid and lastValid which might not be equal to the
 * current network's blockchain block height.
 * @param deployer Deployer
 * @param fileName raw(encoded) signed txn file
 */
export declare function executeSignedTxnFromFile(deployer: Deployer, fileName: string): Promise<ConfirmedTxInfo>;
