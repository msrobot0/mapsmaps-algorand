"use strict";
// This module provides algorand SDK driver
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIndexerClient = exports.createKmdClient = exports.createClient = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const constants_1 = require("../internal/constants");
// appends https protocol to host if no protocol is added
function _parseHost(host) {
    if (host.startsWith('http://') || host.startsWith('https://')) {
        return host;
    }
    return `https://${host}`;
}
// @note: probably in the future we will remove this function and provide our own wrapper
function createClient(n) {
    if (n.name !== constants_1.ALGOB_CHAIN_NAME) {
        const cfg = n.config;
        const algodv2 = new algosdk_1.default.Algodv2(cfg.token, _parseHost(cfg.host), cfg.port);
        algodv2.setIntEncoding(algosdk_1.default.IntDecoding.MIXED); // to support values > Number.MAX_SAFE_INTEGER
        return algodv2;
    }
    throw Error("Initializing SDK driver for AlgobChain is not supported yet");
}
exports.createClient = createClient;
function createKmdClient(kmdCfg) {
    return new algosdk_1.default.Kmd(kmdCfg.token, _parseHost(kmdCfg.host), kmdCfg.port);
}
exports.createKmdClient = createKmdClient;
function createIndexerClient(indexerCfg) {
    if (indexerCfg === undefined) {
        return;
    }
    return new algosdk_1.default.Indexer(indexerCfg.token, _parseHost(indexerCfg.host), indexerCfg.port);
}
exports.createIndexerClient = createIndexerClient;
//# sourceMappingURL=driver.js.map