"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printGlobalStateSSC = exports.printLocalStateSSC = exports.printAssets = exports.readAppLocalState = exports.readAppGlobalState = exports.balanceOf = void 0;
const web_1 = require("@algo-builder/web");
/**
 * Returns `account` balance of `assetID`. Returns 0 if the account has not
 * opt-in to the given asset id.
 * @param deployer algob deployer
 * @param accountAddress account to return assetholding info
 * @param assetID asset index
 */
async function balanceOf(deployer, accountAddress, assetID) {
    const a = await web_1.status.getAssetHolding(deployer.algodClient, accountAddress, assetID);
    if (a === undefined)
        return 0n;
    return a.amount;
}
exports.balanceOf = balanceOf;
;
/**
 * fetches and returns the global state of application.
 * @param deployer Deployer
 * @param creator Account from which call needs to be made
 * @param appID ID of the application being configured or empty if creating
 */
async function readAppGlobalState(deployer, creator, appID) {
    const accountInfoResponse = await deployer.algodClient.accountInformation(creator).do();
    for (const app of accountInfoResponse['created-apps']) {
        if (app.id === appID) {
            const globalStateMap = new Map();
            for (const g of app.params['global-state']) {
                const key = Buffer.from(g.key, 'base64').toString();
                if (g.value.type === 1) {
                    globalStateMap.set(key, g.value.bytes);
                }
                else {
                    globalStateMap.set(key, g.value.uint);
                }
            }
            return globalStateMap;
        }
    }
    return undefined;
}
exports.readAppGlobalState = readAppGlobalState;
/**
 * Read and return the local state of application from an account.
 * @param deployer Deployer
 * @param account account from the which the local state has to be read
 * @param appID ID of the application being configured or empty if creating
 */
async function readAppLocalState(deployer, account, appID) {
    const accountInfoResponse = await deployer.algodClient.accountInformation(account).do();
    for (const app of accountInfoResponse['apps-local-state']) {
        if (app.id === appID) {
            const localStateMap = new Map();
            for (const g of app[`key-value`]) {
                const key = Buffer.from(g.key, 'base64').toString();
                if (g.value.type === 1) {
                    localStateMap.set(key, g.value.bytes);
                }
                else {
                    localStateMap.set(key, g.value.uint);
                }
            }
            return localStateMap;
        }
    }
    return undefined;
}
exports.readAppLocalState = readAppLocalState;
/**
 * Prints account asset holdings and ALGO balance (in microalgos)
 * @param deployer algob deployer object
 * @param account account whose asset holding to print
 */
async function printAssets(deployer, account) {
    const accountInfo = await deployer.algodClient.accountInformation(account).do();
    console.log("Asset Holding Info:", accountInfo.assets);
    console.log("Account's ALGO (microalgos):", accountInfo["amount-without-pending-rewards"]);
}
exports.printAssets = printAssets;
/**
 * print account's local state of a stateful smart contract
 * @param deployer algob deployer
 * @param accountAddr account address to print local state
 * @param appID application index of smart contract
 */
async function printLocalStateSSC(deployer, accountAddr, appID) {
    const localState = await readAppLocalState(deployer, accountAddr, appID);
    if (localState === undefined) {
        return;
    }
    console.log("User's local state:");
    console.log(localState);
}
exports.printLocalStateSSC = printLocalStateSSC;
/**
 * print global state of a stateful smart contract
 * @param deployer algob deployer
 * @param creatorAddr creator address of stateful smart contract
 * @param appID application index of smart contract
 */
async function printGlobalStateSSC(deployer, creatorAddr, appID) {
    const globalState = await readAppGlobalState(deployer, creatorAddr, appID);
    if (globalState === undefined) {
        return;
    }
    console.log("Application's global state:");
    console.log(globalState);
}
exports.printGlobalStateSSC = printGlobalStateSSC;
//# sourceMappingURL=status.js.map