"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const algosdk = __importStar(require("algosdk"));
const chalk_1 = __importDefault(require("chalk"));
const repl_1 = __importDefault(require("repl"));
const vm_1 = require("vm");
const algob = __importStar(require("../index"));
const config_env_1 = require("../internal/core/config/config-env");
const deployer_cfg_1 = require("../internal/deployer_cfg");
const console_1 = require("../internal/util/console");
const algo_operator_1 = require("../lib/algo-operator");
const driver_1 = require("../lib/driver");
const script_checkpoints_1 = require("../lib/script-checkpoints");
const task_names_1 = require("./task-names");
function initializeDeployer(runtimeEnv) {
    const algoOp = (0, algo_operator_1.createAlgoOperator)(runtimeEnv.network);
    const deployerCfg = new deployer_cfg_1.DeployerConfig(runtimeEnv, algoOp);
    const scriptsFromScriptsDir = (0, script_checkpoints_1.lsScriptsDir)();
    (0, script_checkpoints_1.loadCheckpointsIntoCPData)(deployerCfg.cpData, scriptsFromScriptsDir);
    return (0, deployer_cfg_1.mkDeployer)(false, deployerCfg);
}
// handles top level await by preprocessing input and awaits the output before returning
async function evaluate(code, context, filename, callback) {
    try {
        const result = await (0, vm_1.runInNewContext)((0, console_1.preprocess)(code), context);
        callback(null, result);
    }
    catch (e) {
        if (e instanceof Error && (0, console_1.isRecoverableError)(e)) {
            callback(new repl_1.default.Recoverable(e));
        }
        else {
            console.error(e);
            callback(null);
        }
    }
}
async function startConsole(runtimeEnv) {
    const deployer = initializeDeployer(runtimeEnv);
    const algodClient = (0, driver_1.createClient)(runtimeEnv.network);
    await new Promise((resolve, reject) => {
        console.log("★", chalk_1.default.cyan(" Welcome to algob console"), "★");
        console.log(chalk_1.default.green('Try typing: config\n'));
        const server = repl_1.default.start({
            prompt: 'algob> ',
            eval: evaluate
        });
        // assign repl context
        server.context.deployer = deployer;
        server.context.algodClient = algodClient;
        server.context.algob = algob;
        server.context.algosdk = algosdk;
        server.on('exit', () => {
            resolve();
        });
    });
}
function default_1() {
    (0, config_env_1.task)(task_names_1.TASK_CONSOLE, "Opens algob console")
        .addFlag("noCompile", "Don't compile before running this task")
        .setAction(async ({ noCompile }, runtimeEnv) => {
        if (!runtimeEnv.config.paths) {
            return;
        }
        await startConsole(runtimeEnv);
    });
}
exports.default = default_1;
//# sourceMappingURL=console.js.map