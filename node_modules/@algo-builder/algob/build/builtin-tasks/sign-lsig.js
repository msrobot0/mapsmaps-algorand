"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime_1 = require("@algo-builder/runtime");
const algosdk_1 = require("algosdk");
const path_1 = __importDefault(require("path"));
const config_env_1 = require("../internal/core/config/config-env");
const project_structure_1 = require("../internal/core/project-structure");
const msig_1 = require("../lib/msig");
const gen_accounts_1 = require("./gen-accounts");
const task_names_1 = require("./task-names");
// Signs a logic sig object from file. If msig is present then append to multisignature, otherwise
// create single signature lsig.
async function multiSignLsig(taskArgs, runtimeEnv) {
    const signerAccount = runtimeEnv.network.config.accounts.find(acc => acc.name === taskArgs.account);
    if (signerAccount === undefined) {
        console.error(`No account with the name "${taskArgs.account}" exists in the config file.`);
        return;
    }
    const lsig = await (0, msig_1.loadBinaryLsig)(taskArgs.file);
    const sourceFilePath = (0, runtime_1.getPathFromDirRecursive)(project_structure_1.ASSETS_DIR, taskArgs.file);
    if (lsig.msig) {
        lsig.appendToMultisig(signerAccount.sk); // if msig is present then append signature to multisig
    }
    else {
        lsig.sign(signerAccount.sk); // else create single signed lsig
    }
    const [name, ext] = taskArgs.file.split(".");
    const outFileName = taskArgs.out ?? (name + "_out." + ext);
    const outFilePath = path_1.default.join(path_1.default.dirname(sourceFilePath), outFileName);
    // if lsig.args = [] (empty array), then delete that key
    if (lsig.args?.length === 0) {
        lsig.args = undefined;
    }
    const encodedLsig = (0, algosdk_1.encodeObj)(lsig.get_obj_for_encoding());
    await (0, gen_accounts_1.writeToFile)(encodedLsig, taskArgs.force, outFilePath);
}
function default_1() {
    (0, config_env_1.task)(task_names_1.TASK_SIGN_LSIG, "Signs a LogicSig object from a file.")
        .addParam("account", "Name of the account (present in `algob.config.js`) to be used for signing the logic signature.")
        .addParam("file", "Name of the transaction file in assets directory")
        .addOptionalParam("out", "Name of the file to be used for resultant logic signature file.\n\t\t        If not provided source logic signature file's name will be appended by \"_out\"")
        .addFlag("force", "Overwrite output lsig file if the file already exists.")
        .setAction((input, env) => multiSignLsig(input, env));
}
exports.default = default_1;
// const dummyLsig = makeLogicSig(new Uint8Array(56), []);
// console.log('D ', dummyLsig);
//# sourceMappingURL=sign-lsig.js.map