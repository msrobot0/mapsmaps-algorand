"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const findup_sync_1 = __importDefault(require("findup-sync"));
const mocha_1 = __importDefault(require("mocha"));
const config_env_1 = require("../internal/core/config/config-env");
const files_1 = require("../internal/util/files");
const script_checkpoints_1 = require("../lib/script-checkpoints");
const task_names_1 = require("./task-names");
const TEST_DIR = 'test';
async function runTests(config) {
    try {
        const tsPath = (0, findup_sync_1.default)("tsconfig.json", { cwd: process.cwd() });
        if (tsPath) {
            // run tests via ts-mocha, if project is in typescript
            process.env.TS_NODE_PROJECT = tsPath;
            require('ts-mocha');
        }
        // User pass testFiles to arguments so just run those files.
        // else we run test files in default(root) test dir.
        const testFiles = config.testFiles.length !== 0
            ? config.testFiles
            : (0, files_1.loadFilenames)(script_checkpoints_1.testsDirectory, TEST_DIR);
        const mocha = new mocha_1.default(config.mocha);
        // Adding test files to mocha object
        testFiles.forEach((file) => mocha.addFile(file));
        await new Promise((resolve) => {
            mocha.run(resolve);
        });
    }
    catch (error) {
        if (error instanceof Error) {
            console.log(error.message);
        }
        console.error("An unexpected error occurred:", error);
    }
    ;
}
function default_1() {
    (0, config_env_1.task)(task_names_1.TASK_TEST, "Run tests using mocha in project root")
        .addOptionalVariadicPositionalParam("testFiles", "An optional list of file path(s) to test", [])
        .setAction((config) => runTests(config));
}
exports.default = default_1;
//# sourceMappingURL=test.js.map