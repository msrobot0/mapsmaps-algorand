"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadKMDAccounts = exports.loadConfigAndTasks = void 0;
const path_1 = __importDefault(require("path"));
const account_1 = require("../../../lib/account");
const driver_1 = require("../../../lib/driver");
const context_1 = require("../../context");
const plugins_1 = require("../plugins");
const project_structure_1 = require("../project-structure");
const config_resolution_1 = require("./config-resolution");
const config_validation_1 = require("./config-validation");
function importCsjOrEsModule(filePath) {
    const imported = require(filePath); // eslint-disable-line @typescript-eslint/no-var-requires
    return imported.default !== undefined ? imported.default : imported;
}
async function loadConfigAndTasks(runtimeArgs) {
    let configPath = runtimeArgs !== undefined ? runtimeArgs.config : undefined;
    if (configPath === undefined) {
        configPath = (0, project_structure_1.getUserConfigPath)();
    }
    else {
        if (!path_1.default.isAbsolute(configPath)) {
            configPath = path_1.default.join(process.cwd(), configPath);
            configPath = path_1.default.normalize(configPath);
        }
    }
    // Before loading the builtin tasks, the default and user's config we expose
    // the config env in the global object.
    const configEnv = require("./config-env"); // eslint-disable-line @typescript-eslint/no-var-requires
    const globalAsAny = global; // eslint-disable-line @typescript-eslint/no-explicit-any
    Object.entries(configEnv).forEach(([key, value]) => (globalAsAny[key] = value));
    (0, plugins_1.loadPluginFile)(path_1.default.join(__dirname, "..", "tasks", "builtin-tasks"));
    const defaultConfig = importCsjOrEsModule("./default-config");
    const userConfig = configPath !== undefined ? importCsjOrEsModule(configPath) : defaultConfig;
    (0, config_validation_1.validateConfig)(userConfig);
    // To avoid bad practices we remove the previously exported stuff
    Object.keys(configEnv).forEach((key) => (globalAsAny[key] = undefined));
    const cfg = (0, config_resolution_1.resolveConfig)(configPath, defaultConfig, userConfig, context_1.BuilderContext.getBuilderContext().configExtenders);
    const netname = runtimeArgs?.network;
    if (netname !== undefined) {
        const net = cfg.networks[netname];
        if (net?.kmdCfg !== undefined) {
            const kmdOp = new account_1.KMDOperator((0, driver_1.createKmdClient)(net.kmdCfg));
            await loadKMDAccounts(net, kmdOp);
        }
    }
    return cfg;
}
exports.loadConfigAndTasks = loadConfigAndTasks;
// loads KMD accounts if the net.kmdCfg is specified and merges them into net.accounts
async function loadKMDAccounts(net, kmdOp) {
    if (net.kmdCfg === undefined) {
        return;
    }
    const kmdAccounts = await kmdOp.loadKMDAccounts(net.kmdCfg);
    const accounts = new Set();
    for (const a of net.accounts) {
        accounts.add(a.name);
    }
    for (const a of kmdAccounts) {
        if (accounts.has(a.name)) {
            console.warn("KMD account name conflict: KmdConfig and network.accounts both define an account with same name: ", a.name);
        }
        else {
            net.accounts.push(a);
        }
    }
}
exports.loadKMDAccounts = loadKMDAccounts;
//# sourceMappingURL=config-loading.js.map