"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClosestCallerPackage = void 0;
const findup_sync_1 = __importDefault(require("findup-sync"));
const path = __importStar(require("path"));
function findClosestPackageJson(file) {
    return (0, findup_sync_1.default)("package.json", { cwd: path.dirname(file) }) ?? null;
}
/**
 * Returns the name of the closest package in the callstack that isn't this.
 */
function getClosestCallerPackage() {
    const previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (e, s) => s;
    const error = new Error();
    const stack = error.stack; // eslint-disable-line @typescript-eslint/no-explicit-any
    Error.prepareStackTrace = previousPrepareStackTrace;
    const currentPackage = findClosestPackageJson(__filename);
    for (const callSite of stack) {
        const fileName = callSite.getFileName();
        if (fileName !== null && path.isAbsolute(fileName)) {
            const callerPackage = findClosestPackageJson(fileName);
            if (callerPackage === currentPackage) {
                continue;
            }
            if (callerPackage === null) {
                return undefined;
            }
            return require(callerPackage).name; // eslint-disable-line @typescript-eslint/no-var-requires
        }
    }
    return undefined;
}
exports.getClosestCallerPackage = getClosestCallerPackage;
//# sourceMappingURL=caller-package.js.map