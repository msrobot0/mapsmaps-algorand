"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveBuilderRegisterPath = exports.runScript = void 0;
const web_1 = require("@algo-builder/web");
const debug_1 = __importDefault(require("debug"));
const path = __importStar(require("path"));
const log = (0, debug_1.default)("algob:core:scripts-runner");
async function loadScript(relativeScriptPath) {
    const absoluteScriptPath = path.join(process.cwd(), relativeScriptPath);
    try {
        return require(absoluteScriptPath);
    }
    catch (err) {
        throw new web_1.BuilderError(web_1.ERRORS.GENERAL.SCRIPT_LOAD_ERROR, {
            script: absoluteScriptPath,
            error: err.message
        });
    }
}
/** Returns error line number and position at line attached with path.
 * eg: scripts/2-gold-asc.js => scripts/2-gold-asc.js:Line:11,Position:3
 * @param error Error
 * @param scriptPath relative path to script where error occured
 */
function attachLineNumbertoScriptPath(error, scriptPath) {
    const stackTraces = error.stack.split('\n');
    for (const trace of stackTraces) {
        const line = trace?.split(scriptPath.concat(':'))[1]?.slice(0, -1); // extract line number
        if (line) {
            const [lineNo, position] = line.split(':');
            return scriptPath.concat(`:Line:${lineNo},Position:${position}`);
        }
    }
    return scriptPath;
}
function displayErr(error, relativeScriptPath) {
    if (error instanceof web_1.BuilderError) {
        throw error;
    }
    const relativeScriptPathWithLine = attachLineNumbertoScriptPath(error, relativeScriptPath);
    const maybeWrappedError = (0, web_1.parseAlgorandError)(error, { scriptPath: relativeScriptPathWithLine });
    if (maybeWrappedError instanceof web_1.BuilderError) {
        throw maybeWrappedError;
    }
    throw new web_1.BuilderError(web_1.ERRORS.BUILTIN_TASKS.SCRIPT_EXECUTION_ERROR, {
        script: relativeScriptPathWithLine,
        message: error.message
    }, error);
}
async function runScript(relativeScriptPath, runtimeEnv, deployer) {
    // if .ts file is encountered, load from /build/scripts/file.js
    if (relativeScriptPath.endsWith('.ts')) {
        relativeScriptPath = path.join('build', relativeScriptPath.split('.ts')[0] + '.js');
    }
    log(`Running ${relativeScriptPath}.default()`);
    const requiredScript = await loadScript(relativeScriptPath);
    if (!requiredScript.default) {
        throw new web_1.BuilderError(web_1.ERRORS.GENERAL.NO_DEFAULT_EXPORT_IN_SCRIPT, {
            script: relativeScriptPath
        });
    }
    try {
        await requiredScript.default(runtimeEnv, deployer);
    }
    catch (error) {
        displayErr(error, relativeScriptPath);
    }
}
exports.runScript = runScript;
/**
 * Ensure algob/register source file path is resolved to compiled JS file
 * instead of TS source file, so we don't need to run ts-node unnecessarily.
 */
function resolveBuilderRegisterPath() {
    const algobCoreBaseDir = path.join(__dirname, "..", "..", "..");
    return path.join(algobCoreBaseDir, "build/register.js");
}
exports.resolveBuilderRegisterPath = resolveBuilderRegisterPath;
//# sourceMappingURL=scripts-runner.js.map