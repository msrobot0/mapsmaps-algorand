"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuilderContext = void 0;
const web_1 = require("@algo-builder/web");
const extenders_1 = require("./core/config/extenders");
const dsl_1 = require("./core/tasks/dsl");
class BuilderContext {
    constructor() {
        this.tasksDSL = new dsl_1.TasksDSL();
        this.extendersManager = new extenders_1.ExtenderManager();
        this.loadedPlugins = [];
        this.configExtenders = [];
    }
    static isCreated() {
        const globalWithBuilderContext = global;
        return globalWithBuilderContext.__builderContext !== undefined;
    }
    static createBuilderContext() {
        if (this.isCreated()) {
            throw new web_1.BuilderError(web_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);
        }
        const globalWithBuilderContext = global;
        const ctx = new BuilderContext();
        globalWithBuilderContext.__builderContext = ctx;
        return ctx;
    }
    static getBuilderContext() {
        const globalWithBuilderContext = global;
        const ctx = globalWithBuilderContext.__builderContext;
        if (ctx === undefined) {
            throw new web_1.BuilderError(web_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);
        }
        return ctx;
    }
    static deleteBuilderContext() {
        global.__builderContext = undefined; // eslint-disable-line @typescript-eslint/no-explicit-any
    }
    setRuntimeEnv(env) {
        if (this.environment !== undefined) {
            throw new web_1.BuilderError(web_1.ERRORS.GENERAL.CONTEXT_BRE_ALREADY_DEFINED);
        }
        this.environment = env;
    }
    getRuntimeEnv() {
        if (this.environment === undefined) {
            throw new web_1.BuilderError(web_1.ERRORS.GENERAL.CONTEXT_BRE_NOT_DEFINED);
        }
        return this.environment;
    }
    setPluginAsLoaded(pluginName) {
        this.loadedPlugins.push(pluginName);
    }
}
exports.BuilderContext = BuilderContext;
//# sourceMappingURL=context.js.map