"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASADefsSchema = exports.ASADefSchema = exports.AddressSchema = void 0;
const z = __importStar(require("zod"));
exports.AddressSchema = z.string();
// https://developer.algorand.org/docs/reference/rest-apis/algod/
const totalRegex = /^\d+$/;
exports.ASADefSchema = z.object({
    name: z.string().optional(),
    total: z.union([z.number(), z.bigint(), z.string()]) // 'string' to support bigint from yaml file
        .refine(t => (totalRegex.test(String(t)) && BigInt(t) <= 0xffffffffffffffffn && BigInt(t) >= 0n), { message: "Total must be a positive number and smaller than 2^64-1" }),
    decimals: z.union([z.number(), z.bigint()]).refine(decimals => ((decimals <= 19) && (decimals >= 0)), { message: "Decimals must be between 0 (non divisible) and 19" }),
    defaultFrozen: z.boolean().optional(),
    unitName: z.string().optional().refine(unitName => (!unitName || unitName.length <= 8), { message: "Unit name must not be longer than 8 bytes" }),
    url: z.string().optional()
        .refine(url => (!url || url.length <= 96), { message: "URL must not be longer than 96 bytes" }),
    metadataHash: z.string().or(z.instanceof(Buffer)).or(z.instanceof(Uint8Array)).optional().refine(m => (!m ||
        (typeof m === "string" && Buffer.from(m).byteLength === 32) ||
        (m instanceof Uint8Array && m.length === 32)), { message: "Metadata Hash must be a 32 byte Uint8Array or 32 byte string" }),
    note: z.string().optional(),
    noteb64: z.string().optional(),
    manager: exports.AddressSchema.optional(),
    reserve: exports.AddressSchema.optional(),
    freeze: exports.AddressSchema.optional(),
    clawback: exports.AddressSchema.optional(),
    optInAccNames: z.array(z.string()).optional()
});
exports.ASADefsSchema = z.record(exports.ASADefSchema);
//# sourceMappingURL=types-input.js.map