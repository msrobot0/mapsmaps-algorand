import WalletConnect from "@walletconnect/client";
import algosdk from "algosdk";
import { ChainType, ExecParams, SessionConnectResponse, SessionDisconnectResponse, SessionUpdateResponse, TransactionInGroup } from "../types";
export declare class WallectConnectSession {
    readonly connector: WalletConnect;
    private readonly algodClient;
    wcAccounts: string[];
    constructor(chain: ChainType, connector?: WalletConnect);
    /**
     * Create new session
     * @param force if true, kills an existing session and creates new one.
     * By default force is false
     */
    create(force?: boolean): Promise<void>;
    /**
     * Close Connection
     */
    close(): Promise<void>;
    /**
     * On connect subscription event
     * @param handler handler callback
     */
    onConnect(handler: (error: Error | null, response: SessionConnectResponse) => unknown): void;
    /**
     * onUpdate subscription event
     * @param handler handler callback
     */
    onUpdate(handler: (error: Error | null, response: SessionUpdateResponse) => unknown): void;
    /**
     * onDisconnect subscription event
     * @param handler handler callback
     */
    onDisconnect(handler: (error: Error | null, payload: SessionDisconnectResponse) => unknown): void;
    /**
     * Sign a single transaction from a wallect connect session
     * @param txn { SDK transaction object, shouldSign, signers, msig } object
     * @param message optional message with txn
     * @returns raw signed txn
     */
    private signTransaction;
    /**
     * Sign a group of transaction(s) from a wallect connect session
     * @param txn { SDK transaction object, shouldSign, signers, msig } object
     * @param message optional message with txn
     * @returns array of raw signed txns | null. null representes that the txn in array is NOT signed
     * by wallet user (i.e signable by someone else).
     * TODO: handle case of multiple signers in group transaction
     */
    signTransactionGroup(txns: TransactionInGroup[], message?: string): Promise<Array<(Uint8Array | null)>>;
    /**
     * Send signed transaction to network and wait for confirmation
     * @param rawTxns Signed Transaction(s)
     */
    private sendAndWait;
    private waitForConfirmation;
    /**
   * Execute single transaction or group of transactions (atomic transaction)
   * @param execParams transaction parameters or atomic transaction parameters
   */
    executeTransaction(execParams: ExecParams | ExecParams[]): Promise<algosdk.modelsv2.PendingTransactionResponse>;
}
