export declare function stringToBytes(s: string): Uint8Array;
/**
 * Converts 64 bit unsigned integer to bytes in big endian.
 */
export declare function uint64ToBigEndian(x: number | bigint): Uint8Array;
/**
 * Takes an Algorand address in string form and decodes it into a Uint8Array (as public key)
 * @param addr : algorand address
 */
export declare function addressToPk(addr: string): Uint8Array;
/**
 * Parses appArgs to bytes if arguments passed to App are similar to goal ('int:1', 'str:hello'..)
 * https://developer.algorand.org/docs/features/asc1/stateful/#passing-arguments-to-stateful-smart-contracts
 * eg. "int:1" => new Uint8Aarray([0, 0, 0, 0, 0, 0, 0, 1])
 * NOTE: parseAppArgs returns undefined to handle the case when application args passed to
 * stateful smart contract is undefined
 * @param appArgs : arguments to stateful smart contract
 */
export declare function parseAppArgs(appArgs?: Array<Uint8Array | string>): Uint8Array[] | undefined;
