"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkTransaction = exports.updateTxFee = exports.getFromAddress = exports.encodeNote = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const errors_1 = require("../errors/errors");
const errors_list_1 = require("../errors/errors-list");
const types_1 = require("../types");
const parsing_1 = require("./parsing");
function encodeNote(note, noteb64) {
    if (note === undefined && noteb64 === undefined) {
        return undefined;
    }
    const encoder = new TextEncoder();
    return noteb64 ? encoder.encode(noteb64) : encoder.encode(note);
}
exports.encodeNote = encodeNote;
/**
 * Returns from address from the transaction params depending on @SignType
 * @param execParams transaction execution params passed by user
 */
function getFromAddress(execParams) {
    if (execParams.sign === types_1.SignType.SecretKey) {
        return execParams.fromAccountAddr || execParams.fromAccount.addr; // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing
    }
    return execParams.fromAccountAddr;
}
exports.getFromAddress = getFromAddress;
/**
 * Using flatFee, if flatFee is true, set totalFee
 * https://developer.algorand.org/tutorials/setting-transaction-fee-javascript/
 * @param params Transaction parameters
 * @param tx SDK Transaction object
 */
function updateTxFee(params, tx) {
    if (params.totalFee !== undefined) {
        tx.fee = params.totalFee;
    }
    return tx;
}
exports.updateTxFee = updateTxFee;
/**
 * Returns unsigned transaction as per ExecParams
 * ExecParams can be of following types:
 *  + AlgoTransferParam used for transferring algo
 *  + AssetTransferParam used for transferring asset
 *  + ModifyAssetParam used to modify asset mutable properties
 *  + FreezeAssetParam used to freeze asset (only permitted by asa freeze account)
 *  + RevokeAssetParam used to revoke assets (by asset clawback)
 *  + DestroyAssetParam used to delete asset (by asset manager)
 *  + Deploy Params - deploy ASA, deploy App
 *  + OptIn Params - optInToASA, optInToApp
 *  + AppCallsParam (NoOp, Clear, Delete..)used for calling stateful smart contracts.
 For more advanced use-cases, please use `algosdk.tx` directly.
 NOTE: parseAppArgs is used to handle case when user passes appArgs similar to goal
 * @param execParams ExecParams
 * @param suggestedParams blockchain transaction suggested parameters (firstRound, lastRound, fee..)
 * @returns SDK Transaction object
 */
function mkTransaction(execParams, suggestedParams) {
    const note = encodeNote(execParams.payFlags.note, execParams.payFlags.noteb64);
    const transactionType = execParams.type;
    const fromAccountAddr = getFromAddress(execParams);
    switch (execParams.type) {
        case types_1.TransactionType.TransferAsset: {
            const tx = algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(fromAccountAddr, execParams.toAccountAddr, execParams.payFlags.closeRemainderTo, undefined, execParams.amount, note, execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.ModifyAsset: {
            const tx = algosdk_1.default.makeAssetConfigTxnWithSuggestedParams(fromAccountAddr, encodeNote(execParams.payFlags.note, execParams.payFlags.noteb64), execParams.assetID, execParams.fields.manager !== "" ? execParams.fields.manager : undefined, execParams.fields.reserve !== "" ? execParams.fields.reserve : undefined, execParams.fields.freeze !== "" ? execParams.fields.freeze : undefined, execParams.fields.clawback !== "" ? execParams.fields.clawback : undefined, suggestedParams, false, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.FreezeAsset: {
            const tx = algosdk_1.default.makeAssetFreezeTxnWithSuggestedParams(fromAccountAddr, encodeNote(execParams.payFlags.note, execParams.payFlags.noteb64), execParams.assetID, execParams.freezeTarget, execParams.freezeState, suggestedParams, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.RevokeAsset: {
            const tx = algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(fromAccountAddr, execParams.recipient, execParams.payFlags.closeRemainderTo, execParams.revocationTarget, execParams.amount, encodeNote(execParams.payFlags.note, execParams.payFlags.noteb64), execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.DestroyAsset: {
            const tx = algosdk_1.default.makeAssetDestroyTxnWithSuggestedParams(fromAccountAddr, encodeNote(execParams.payFlags.note, execParams.payFlags.noteb64), execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.TransferAlgo: {
            const tx = algosdk_1.default.makePaymentTxnWithSuggestedParams(fromAccountAddr, execParams.toAccountAddr, execParams.amountMicroAlgos, execParams.payFlags.closeRemainderTo, note, suggestedParams, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.ClearApp: {
            const tx = algosdk_1.default.makeApplicationClearStateTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.DeleteApp: {
            const tx = algosdk_1.default.makeApplicationDeleteTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.CallApp: {
            const tx = algosdk_1.default.makeApplicationNoOpTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.CloseApp: {
            const tx = algosdk_1.default.makeApplicationCloseOutTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.DeployASA: {
            if (execParams.asaDef) {
                // https://github.com/algorand/docs/blob/master/examples/assets/v2/javascript/AssetExample.js#L104
                const tx = algosdk_1.default.makeAssetCreateTxnWithSuggestedParams(fromAccountAddr, note, BigInt(execParams.asaDef.total || 0), // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing
                execParams.asaDef.decimals, execParams.asaDef.defaultFrozen ? execParams.asaDef.defaultFrozen : false, execParams.asaDef.manager, execParams.asaDef.reserve, execParams.asaDef.freeze, execParams.asaDef.clawback, execParams.asaDef.unitName, execParams.asaName, execParams.asaDef.url, execParams.asaDef.metadataHash, suggestedParams, execParams.payFlags.rekeyTo);
                return updateTxFee(execParams.payFlags, tx);
            }
            else {
                throw new errors_1.BuilderError(errors_list_1.ERRORS.GENERAL.PARAM_PARSE_ERROR, {
                    reason: "ASA Definition not found",
                    source: execParams.asaName
                });
            }
        }
        case types_1.TransactionType.DeployApp: {
            const onComplete = algosdk_1.default.OnApplicationComplete.NoOpOC;
            const tx = algosdk_1.default.makeApplicationCreateTxn(fromAccountAddr, suggestedParams, onComplete, execParams.approvalProg, execParams.clearProg, execParams.localInts, execParams.localBytes, execParams.globalInts, execParams.globalBytes, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo, execParams.extraPages);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.UpdateApp: {
            const tx = algosdk_1.default.makeApplicationUpdateTxn(fromAccountAddr, suggestedParams, execParams.appID, execParams.approvalProg, execParams.clearProg, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.OptInToApp: {
            const tx = algosdk_1.default.makeApplicationOptInTxn(fromAccountAddr, suggestedParams, execParams.appID, (0, parsing_1.parseAppArgs)(execParams.appArgs), execParams.accounts, execParams.foreignApps, execParams.foreignAssets, note, execParams.lease, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        case types_1.TransactionType.OptInASA: {
            const tx = algosdk_1.default.makeAssetTransferTxnWithSuggestedParams(fromAccountAddr, fromAccountAddr, undefined, undefined, 0, note, execParams.assetID, suggestedParams, execParams.payFlags.rekeyTo);
            return updateTxFee(execParams.payFlags, tx);
        }
        default: {
            throw new errors_1.BuilderError(errors_list_1.ERRORS.GENERAL.TRANSACTION_TYPE_ERROR, { transaction: transactionType });
        }
    }
}
exports.mkTransaction = mkTransaction;
//# sourceMappingURL=txn.js.map