"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceAll = exports.applyErrorMessageTemplate = exports.parseAlgorandError = exports.BuilderError = exports.ERRORS = void 0;
const errors_list_1 = require("./errors-list");
Object.defineProperty(exports, "ERRORS", { enumerable: true, get: function () { return errors_list_1.ERRORS; } });
// For an explanation about these classes constructors go to:
// https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
class BuilderError extends Error {
    constructor(errorDescriptor, messageArguments = {}, parentError) {
        const prefix = `${(0, errors_list_1.getErrorCode)(errorDescriptor)}: `;
        const formattedMessage = applyErrorMessageTemplate(errorDescriptor.message, messageArguments);
        super(String(prefix) + String(formattedMessage));
        this.errorDescriptor = errorDescriptor;
        this.number = errorDescriptor.number;
        if (parentError instanceof Error) {
            this.parent = parentError;
        }
        this._isBuilderError = true;
        Object.setPrototypeOf(this, BuilderError.prototype);
    }
    static isBuilderError(other) {
        return (other !== undefined && other !== null && other._isBuilderError === true);
    }
}
exports.BuilderError = BuilderError;
function parseAlgorandError(e, ctx) {
    if (e === undefined) {
        return new BuilderError(errors_list_1.ERRORS.NETWORK.NODE_IS_NOT_RUNNING);
    }
    if (e.response?.statusCode !== undefined) {
        if (e.response?.statusCode >= 400 && e.response?.statusCode < 500) {
            return new BuilderError(errors_list_1.ERRORS.ALGORAND.BAD_REQUEST, {
                status: e.response?.statusCode,
                message: e.response?.body?.message || e.response?.text || e.response?.error,
                ctx: JSON.stringify(ctx)
            }, e.error);
        }
        return new BuilderError(errors_list_1.ERRORS.ALGORAND.INTERNAL_ERROR, {
            status: e.response?.statusCode
        }, e);
    }
    return e;
}
exports.parseAlgorandError = parseAlgorandError;
/**
 * This function applies error messages templates like this:
 *
 *  - Template is a string which contains a variable tags. A variable tag is a
 *    a variable name surrounded by %. Eg: %plugin1%
 *  - A variable name is a string of alphanumeric ascii characters.
 *  - Every variable tag is replaced by its value.
 *  - %% is replaced by %.
 *  - Values can't contain variable tags.
 *  - If a variable is not present in the template, but present in the values
 *    object, an error is thrown.
 *
 * @param template The template string.
 * @param values A map of variable names to their values.
 */
function applyErrorMessageTemplate(template, values // eslint-disable-line @typescript-eslint/no-explicit-any
) {
    return _applyErrorMessageTemplate(template, values);
}
exports.applyErrorMessageTemplate = applyErrorMessageTemplate;
function _applyErrorMessageTemplate(template, values // eslint-disable-line @typescript-eslint/no-explicit-any
) {
    if (template.includes("%%")) {
        return template
            .split("%%")
            .map((part) => _applyErrorMessageTemplate(part, values))
            .join("%");
    }
    for (const variableName of Object.keys(values)) {
        let value;
        if (values[variableName] === undefined) {
            value = "undefined";
        }
        else if (values[variableName] === null) {
            value = "null";
        }
        else {
            value = values[variableName].toString();
        }
        if (value === undefined) {
            value = "undefined";
        }
        const variableTag = `%${variableName}%`;
        template = replaceAll(template, variableTag, value);
    }
    return template;
}
/**
 * Replaces all the instances of [[toReplace]] by [[replacement]] in [[str]].
 */
function replaceAll(str, toReplace, replacement) {
    return str.split(toReplace).join(replacement);
}
exports.replaceAll = replaceAll;
//# sourceMappingURL=errors.js.map