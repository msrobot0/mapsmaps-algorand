"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
class Stack {
    constructor(capacity = 1000) {
        this.capacity = capacity;
        this._store = [];
    }
    length() {
        return this._store.length;
    }
    push(item) {
        if (this.length() === this.capacity) {
            throw new Error(`Stack overflow: cannot push more items than max capacity ${this.capacity}`);
        }
        this._store.push(item);
    }
    pop() {
        if (this.length() === 0) {
            throw new Error("pop from empty stack");
        }
        return this._store.pop();
    }
    /**
     * returns an array of top elements of stack (upto depth = depth)
     * @param depth no. of elements to return (from top of stack). If depth > stack.length,
     * then a copy of entire stack is returned
     */
    debug(depth) {
        const maxDepth = Math.min(depth, this.length());
        return [...this._store].reverse().splice(0, maxDepth); // .reverse() to return elements from top
    }
}
exports.Stack = Stack;
//# sourceMappingURL=stack.js.map