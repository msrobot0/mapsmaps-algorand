"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bigEndianBytesToBigInt = exports.bigintToBigEndianBytes = exports.parseBinaryStrToBigInt = exports.getEncoding = exports.convertToBuffer = exports.convertToString = exports.keyToBytes = exports.assertBase32 = exports.assertBase64 = exports.assertLen = exports.assertNumber = exports.assertOnlyDigits = void 0;
const web_1 = require("@algo-builder/web");
const base32 = __importStar(require("hi-base32"));
const errors_list_1 = require("../errors/errors-list");
const runtime_errors_1 = require("../errors/runtime-errors");
const types_1 = require("../types");
const constants_1 = require("./constants");
/**
 * assert if string contains digits only
 * "123" // ok.  "12+2" // error.
 * @param val : string
 */
function assertOnlyDigits(val, line) {
    if (!constants_1.reDigit.test(val)) {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.INVALID_TYPE, {
            expected: "unsigned integer (upto 64 bit)",
            actual: val,
            line: line
        });
    }
}
exports.assertOnlyDigits = assertOnlyDigits;
/**
 * assert if string is valid algorand number respesentation (octal / hex / unsigned int).
 * return val if format is correct
 * @param val : string
 */
function assertNumber(val, line) {
    if (constants_1.reOct.test(val)) {
        // typescript use 0o postfix instade of 0 postfix for oct format.
        return "0o".concat(val.substring(1));
    }
    if (constants_1.reDec.test(val) || constants_1.reHex.test(val))
        return val;
    throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.INVALID_TYPE, {
        expected: "unsigned integer (upto 64 bit)",
        actual: val,
        line: line
    });
}
exports.assertNumber = assertNumber;
/**
 * assert that a line has given number of words
 * @param val Comparsion result
 * @param expected expected result
 * @param line Line number in TEAL file
 */
function assertLen(val, expected, line) {
    if (val !== expected) {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.ASSERT_LENGTH, { exp: expected, got: val, line: line });
    }
}
exports.assertLen = assertLen;
/**
 * Checks if string is base64
 * @param str : string that needs to be checked
 * @param line : line number in TEAL file
 */
function assertBase64(str, line) {
    if (!constants_1.reBase64.test(str)) {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.INVALID_BASE64, { val: str, line: line });
    }
}
exports.assertBase64 = assertBase64;
/**
 * Checks if string is base32
 * @param str : string that needs to be checked
 * @param line : line number in TEAL file
 */
function assertBase32(str, line) {
    if (!constants_1.reBase32.test(str)) {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.INVALID_BASE32, { val: str, line: line });
    }
}
exports.assertBase32 = assertBase32;
/**
 * returns key as bytes
 * @param key : key in a stateful key-value pair
 */
function keyToBytes(key) {
    return typeof key === 'string' ? web_1.parsing.stringToBytes(key) : key;
}
exports.keyToBytes = keyToBytes;
// parse Uint8Array to string
function convertToString(u) {
    return Buffer.from(u).toString('utf-8');
}
exports.convertToString = convertToString;
/**
 * Description : converts string into buffer as per encoding type
 * @param s : string to be converted
 * @param encoding : encoding type
 */
function convertToBuffer(s, encoding) {
    switch (encoding) {
        case types_1.EncodingType.BASE64: {
            return Buffer.from(s, 'base64');
        }
        case types_1.EncodingType.BASE32: {
            return Buffer.from(base32.decode(s));
        }
        case types_1.EncodingType.HEX: {
            return Buffer.from(s, 'hex');
        }
        case types_1.EncodingType.UTF8: {
            return Buffer.from(s);
        }
        default: { // default encoding (utf-8)
            return Buffer.from(s);
        }
    }
}
exports.convertToBuffer = convertToBuffer;
/**
 * Returns string and type of encoding (base64 or base32) on string
 * @param arg string containg type of encoding + encoded string
 * eg. b32(MFRGGZDFMY=) => returns [MFRGGZDFMY=, EncodingType.BASE32]
 * @param line line number
 */
function base64OrBase32(arg, line) {
    // Base64 string
    if ((arg.startsWith('base64(') || arg.startsWith('b64(')) && arg.endsWith(')')) {
        const str = arg.startsWith('b64(') ? arg.slice(4, arg.length - 1) : arg.slice(7, arg.length - 1);
        assertBase64(str, line);
        return [str, types_1.EncodingType.BASE64];
    }
    // Base32 string
    if ((arg.startsWith('base32(') || arg.startsWith('b32(')) && arg.endsWith(')')) {
        const str = arg.startsWith('b32(') ? arg.slice(4, arg.length - 1) : arg.slice(7, arg.length - 1);
        assertBase32(str, line);
        return [str, types_1.EncodingType.BASE32];
    }
    throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.DECODE_ERROR, { val: arg, line: line });
}
/**
 * returns encodingtype (base32, base64, utf8, hex) and the encoded string from words list
 * eg. base64 "dfc/==" => returns [dfc/==, EncodingType.BASE64]
 *     0xadkjka => returns [adkjka, EncodingType.HEX] (removing 0x)
 *     "hello" => returns [hello, EncodingType.UTF8] (removing quotes "")
 * @param args : words list for base64 and base32
 * @param line line number
 */
function getEncoding(args, line) {
    if (args.length === 1) {
        // "string literal"
        if (args[0].startsWith('"') && args[0].endsWith('"')) {
            return [args[0].slice(1, args[0].length - 1), types_1.EncodingType.UTF8];
        }
        // 0X.. HEX
        if (args[0].startsWith('0x')) {
            return [args[0].slice(2), types_1.EncodingType.HEX];
        }
        return base64OrBase32(args[0], line);
    }
    else if (args.length === 2) {
        // base64 string
        if (["base64", "b64"].includes(args[0])) {
            assertBase64(args[1], line);
            return [args[1], types_1.EncodingType.BASE64];
        }
        // base32 string
        if (["base32", "b32"].includes(args[0])) {
            assertBase32(args[1], line);
            return [args[1], types_1.EncodingType.BASE32];
        }
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.UNKOWN_DECODE_TYPE, { val: args[0], line: line });
    }
    else {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.UNKOWN_DECODE_TYPE, { val: args[0], line: line });
    }
}
exports.getEncoding = getEncoding;
/**
 * Parses binary string into bigint. Eg '101' OR ['1', '0', '1'] => 5n
 * @param binary Binary string array or a string
 */
function parseBinaryStrToBigInt(binary) {
    let res = 0n;
    for (let i = 0; i < binary.length; ++i) {
        if (binary[i] === '1') {
            const val = binary.length - 1 - i;
            res += 2n ** BigInt(val);
        }
    }
    return res;
}
exports.parseBinaryStrToBigInt = parseBinaryStrToBigInt;
// convert bigint/number -> hex string
function toHex(b) {
    const hex = BigInt(b).toString(16);
    if (hex.length % 2) {
        return '0' + hex;
    } // add missing padding
    return hex;
}
// converts buffer/uint8array to hex string
function buffToHex(u) {
    const uint8Arr = Uint8Array.from(u);
    const hexArr = [];
    uint8Arr.forEach((i) => { hexArr.push(toHex(i)); }); // each byte to hex
    return '0x' + hexArr.join('');
}
/**
 * Parses bigint to big endian bytes (represeted as Uint8array)
 * NOTE: This is different from decodeUint64, encodeUint64 as it is capable of
 * handling bigint > 64 bit (8 bytes).
 * @param b value in bigint to parse
 */
function bigintToBigEndianBytes(b) {
    const hex = toHex(b);
    // The byteLength will be half of the hex string length
    const len = hex.length / 2;
    const u8 = new Uint8Array(len);
    // And then we can iterate each element by one
    // and each hex segment by two
    let i = 0;
    let j = 0;
    while (i < len) {
        u8[i] = parseInt(hex.slice(j, j + 2), 16);
        i += 1;
        j += 2;
    }
    return u8;
}
exports.bigintToBigEndianBytes = bigintToBigEndianBytes;
/**
 * Parses unsigned big endian bytes (represented as Uint8array) back to bigint
 * NOTE: This is different from decodeUint64, encodeUint64 as it is capable of
 * handling bigint > 64 bit (8 bytes).
 * @param bytes big endian bytes (buffer or Uint8array)
 */
function bigEndianBytesToBigInt(bytes) {
    if (bytes.length === 0) {
        return 0n;
    }
    return BigInt(buffToHex(bytes));
}
exports.bigEndianBytesToBigInt = bigEndianBytesToBigInt;
//# sourceMappingURL=parsing.js.map