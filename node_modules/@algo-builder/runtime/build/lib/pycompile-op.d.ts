import type { ReplaceParams, SCParams } from "../types";
export declare const tealExt = ".teal";
export declare const pyExt = ".py";
export declare const ASSETS_DIR = "assets";
export declare class PyCompileOp {
    /**
     * Returns TEAL code from pyteal file (pyTEAL --> TEAL)
     * @param filename : name of the PyTeal code in `/assets` directory.
     *                   Examples : [ gold.py, asa.py]
     *                   MUST have .py extension
     * @param scTmplParams: Smart contract template parameters (used only when compiling PyTEAL to TEAL)
     * @param logs only show logs on console when set as true. By default this value is true
     */
    ensurePyTEALCompiled(filename: string, scTmplParams?: SCParams, logs?: boolean): string;
    /**
     * Parses scTmplParams and returns ReplaceParams and stringify object
     * @param scTmplParams smart contract template parameters
     * @param logs only show logs on console when set as true. By default this value is true
     */
    parseScTmplParam(scTmplParams?: SCParams, logs?: boolean): [ReplaceParams, string | undefined];
    /**
     * Replaces keys with the values in program using replaceParams
     * @param program Teal program in string
     * @param replaceParams params that needs to be replaced in program
     */
    replaceTempValues(program: string, replaceParams: ReplaceParams): string;
    /**
     * Description: Runs a subprocess to execute python script
     * @param filename : python filename in assets folder
     * @param scInitParam : Smart contract initialization parameters.
     */
    private runPythonScript;
    /**
     * Description: returns TEAL code using pyTeal compiler
     * @param filename : python filename in assets folder
     * @param scInitParam : Smart contract initialization parameters.
     */
    compilePyTeal(filename: string, scInitParam?: string): string;
}
