"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertValidSchema = void 0;
const errors_list_1 = require("../errors/errors-list");
const runtime_errors_1 = require("../errors/runtime-errors");
const constants_1 = require("./constants");
/**
 * Allow the combination of key-value pairs to a max size of 128 bytes.
 * i.e (key.length + value.length <= 128)
 * NOTE: The key is still restricted to 64 bytes or less.
 * @param key stateful schema key
 * @param value value at key (uint / bytes)
 * https://developer.algorand.org/articles/introducing-algorand-virtual-machine-avm-09-release/
 */
function assertKeyValLengthValid(key, value) {
    let isSchemaInValid = false;
    isSchemaInValid = (key.length > constants_1.MAX_KEY_BYTES);
    if (value instanceof Uint8Array && ((key.length + value.length) > constants_1.MAX_KEY_VAL_BYTES)) {
        isSchemaInValid = true;
    }
    if (isSchemaInValid) {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.INVALID_SCHEMA);
    }
}
/**
 * Description: assert if the given key-value pairs are valid by schema
 * @param keyValue: list of key-value pairs (state data)
 * @param schema: permissible local/global state schema
 */
function assertValidSchema(keyValue, schema) {
    let numUint = 0;
    let byteSlices = 0;
    keyValue.forEach((value, key) => {
        const keyasByte = new Uint8Array(key.split(',').map(Number));
        assertKeyValLengthValid(keyasByte, value);
        value instanceof Uint8Array ? byteSlices++ : numUint++;
    });
    if (numUint > schema.numUint || byteSlices > schema.numByteSlice) {
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.TEAL.INVALID_SCHEMA);
    }
}
exports.assertValidSchema = assertValidSchema;
//# sourceMappingURL=stateful.js.map