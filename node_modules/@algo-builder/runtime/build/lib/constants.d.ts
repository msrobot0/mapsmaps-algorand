import { EncodedAssetParams, EncodedLocalStateSchema, EncodedTransaction } from "algosdk";
export declare const MIN_UINT64 = 0n;
export declare const MAX_UINT64 = 18446744073709551615n;
export declare const MAX_UINT128 = 340282366920938463463374607431768211455n;
export declare const MAX_UINT8 = 255;
export declare const MIN_UINT8 = 0;
export declare const MAX_UINT6 = 63n;
export declare const DEFAULT_STACK_ELEM = 0n;
export declare const MAX_CONCAT_SIZE = 4096;
export declare const ALGORAND_MIN_TX_FEE = 1000;
export declare const ALGORAND_ACCOUNT_MIN_BALANCE = 100000;
export declare const MaxTEALVersion = 6;
export declare const APPLICATION_BASE_FEE = 100000;
export declare const ASSET_CREATION_FEE = 100000;
export declare const SSC_VALUE_UINT = 28500;
export declare const SSC_VALUE_BYTES = 50000;
export declare const MAX_KEY_BYTES = 64;
export declare const MAX_KEY_VAL_BYTES = 128;
export declare const LogicSigMaxCost = 20000;
export declare const MaxAppProgramCost = 700;
export declare const LogicSigMaxSize = 1000;
export declare const MaxAppProgramLen = 1024;
export declare const ALGORAND_MAX_APP_ARGS_LEN = 16;
export declare const ALGORAND_MAX_TX_ACCOUNTS_LEN = 4;
export declare const ALGORAND_MAX_TX_ARRAY_LEN = 8;
export declare const MAX_INNER_TRANSACTIONS = 16;
export declare const ALGORAND_MAX_LOGS_COUNT = 32;
export declare const ALGORAND_MAX_LOGS_LENGTH = 1024;
export declare const MAX_ALGORAND_ACCOUNT_ASSETS = 1000;
export declare const MAX_ALGORAND_ACCOUNT_CREATED_APPS = 10;
export declare const MAX_ALGORAND_ACCOUNT_OPTEDIN_APPS = 50;
export declare const MAX_INPUT_BYTE_LEN = 64;
export declare const MAX_OUTPUT_BYTE_LEN = 128;
export declare const ZERO_ADDRESS: Uint8Array;
export declare const ZERO_ADDRESS_STR = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
declare type keyOfEncTx = keyof EncodedTransaction | keyof EncodedAssetParams | keyof EncodedLocalStateSchema;
export declare const TxnFields: {
    [key: number]: {
        [key: string]: keyOfEncTx | null;
    };
};
export declare const ITxnFields: {
    [key: number]: {
        [key: string]: keyOfEncTx | null;
    };
};
export declare const TxArrFields: {
    [key: number]: Set<string>;
};
export declare const ITxArrFields: {
    [key: number]: Set<string>;
};
export declare const TxFieldDefaults: {
    [key: string]: any;
};
export declare const AssetParamMap: {
    [key: number]: {
        [key: string]: string;
    };
};
export declare const AppParamDefined: {
    [key: number]: Set<string>;
};
export declare const reDigit: RegExp;
export declare const reDec: RegExp;
export declare const reHex: RegExp;
export declare const reOct: RegExp;
/** is Base64 regex
 * ^                          # Start of input
 * ([0-9a-zA-Z+/]{4})*        # Groups of 4 valid characters decode
 *                            # to 24 bits of data for each group
 * (                          # Either ending with:
 *     ([0-9a-zA-Z+/]{2}==)   # two valid characters followed by ==
 *     |                      # , or
 *     ([0-9a-zA-Z+/]{3}=)    # three valid characters followed by =
 * )?                         # , or nothing
 * $                          # End of input
 */
export declare const reBase64: RegExp;
export declare const reBase32: RegExp;
export declare const GlobalFields: {
    [key: number]: {
        [key: string]: any;
    };
};
export declare const OpGasCost: {
    [key: number]: {
        [key: string]: number;
    };
};
export declare const enum MathOp {
    Add = 0,
    Sub = 1,
    Mul = 2,
    Div = 3,
    Mod = 4,
    LessThan = 5,
    GreaterThan = 6,
    LessThanEqualTo = 7,
    GreaterThanEqualTo = 8,
    EqualTo = 9,
    NotEqualTo = 10,
    BitwiseOr = 11,
    BitwiseAnd = 12,
    BitwiseXor = 13,
    BitwiseInvert = 14
}
export declare const TxnTypeMap: {
    [key: string]: string;
};
/**
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/specification/#typeenum-constants
 */
export declare enum TransactionTypeEnum {
    UNKNOWN = "unknown",
    PAYMENT = "pay",
    KEY_REGISTRATION = "keyreg",
    ASSET_CONFIG = "acfg",
    ASSET_TRANSFER = "axfer",
    ASSET_FREEZE = "afrz",
    APPLICATION_CALL = "appl"
}
export {};
