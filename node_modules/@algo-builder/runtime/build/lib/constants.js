"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxnTypeMap = exports.OpGasCost = exports.GlobalFields = exports.reBase32 = exports.reBase64 = exports.reOct = exports.reHex = exports.reDec = exports.reDigit = exports.AppParamDefined = exports.AssetParamMap = exports.TxFieldDefaults = exports.ITxArrFields = exports.TxArrFields = exports.ITxnFields = exports.TxnFields = exports.ZERO_ADDRESS_STR = exports.ZERO_ADDRESS = exports.MAX_OUTPUT_BYTE_LEN = exports.MAX_INPUT_BYTE_LEN = exports.MAX_ALGORAND_ACCOUNT_OPTEDIN_APPS = exports.MAX_ALGORAND_ACCOUNT_CREATED_APPS = exports.MAX_ALGORAND_ACCOUNT_ASSETS = exports.ALGORAND_MAX_LOGS_LENGTH = exports.ALGORAND_MAX_LOGS_COUNT = exports.MAX_INNER_TRANSACTIONS = exports.ALGORAND_MAX_TX_ARRAY_LEN = exports.ALGORAND_MAX_TX_ACCOUNTS_LEN = exports.ALGORAND_MAX_APP_ARGS_LEN = exports.MaxAppProgramLen = exports.LogicSigMaxSize = exports.MaxAppProgramCost = exports.LogicSigMaxCost = exports.MAX_KEY_VAL_BYTES = exports.MAX_KEY_BYTES = exports.SSC_VALUE_BYTES = exports.SSC_VALUE_UINT = exports.ASSET_CREATION_FEE = exports.APPLICATION_BASE_FEE = exports.MaxTEALVersion = exports.ALGORAND_ACCOUNT_MIN_BALANCE = exports.ALGORAND_MIN_TX_FEE = exports.MAX_CONCAT_SIZE = exports.DEFAULT_STACK_ELEM = exports.MAX_UINT6 = exports.MIN_UINT8 = exports.MAX_UINT8 = exports.MAX_UINT128 = exports.MAX_UINT64 = exports.MIN_UINT64 = void 0;
exports.TransactionTypeEnum = void 0;
const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
exports.MIN_UINT64 = 0n;
exports.MAX_UINT64 = 0xffffffffffffffffn;
exports.MAX_UINT128 = 340282366920938463463374607431768211455n;
exports.MAX_UINT8 = 255;
exports.MIN_UINT8 = 0;
exports.MAX_UINT6 = 63n;
exports.DEFAULT_STACK_ELEM = 0n;
exports.MAX_CONCAT_SIZE = 4096;
exports.ALGORAND_MIN_TX_FEE = 1000;
// https://github.com/algorand/go-algorand/blob/master/config/consensus.go#L659
exports.ALGORAND_ACCOUNT_MIN_BALANCE = 0.1e6; // 0.1 ALGO
exports.MaxTEALVersion = 6;
// values taken from: https://developer.algorand.org/docs/features/asc1/stateful/#minimum-balance-requirement-for-a-smart-contract
// minimum balance costs (in microalgos) for ssc schema
exports.APPLICATION_BASE_FEE = 0.1e6; // base fee for creating or opt-in to application
exports.ASSET_CREATION_FEE = 0.1e6; // creation fee for asset
exports.SSC_VALUE_UINT = 28500; // cost for value as uint64
exports.SSC_VALUE_BYTES = 50000; // cost for value as bytes
exports.MAX_KEY_BYTES = 64; // max length of key
exports.MAX_KEY_VAL_BYTES = 128; // max combined length of key-value pair
// values taken from [https://github.com/algorand/go-algorand/blob/master/config/consensus.go#L691]
exports.LogicSigMaxCost = 20000;
exports.MaxAppProgramCost = 700;
exports.LogicSigMaxSize = 1000;
exports.MaxAppProgramLen = 1024;
exports.ALGORAND_MAX_APP_ARGS_LEN = 16;
exports.ALGORAND_MAX_TX_ACCOUNTS_LEN = 4;
// the assets and application arrays combined and totaled with the accounts array can not exceed 8
exports.ALGORAND_MAX_TX_ARRAY_LEN = 8;
exports.MAX_INNER_TRANSACTIONS = 16;
exports.ALGORAND_MAX_LOGS_COUNT = 32;
exports.ALGORAND_MAX_LOGS_LENGTH = 1024;
exports.MAX_ALGORAND_ACCOUNT_ASSETS = 1000;
exports.MAX_ALGORAND_ACCOUNT_CREATED_APPS = 10;
exports.MAX_ALGORAND_ACCOUNT_OPTEDIN_APPS = 50;
// for byteslice arithmetic ops, inputs are limited to 64 bytes,
// but ouput can be upto 128 bytes (eg. when using b+ OR b*)
// https://github.com/algorand/go-algorand/blob/bd5a00092c8a63dba8314b97851e46ff247cf7c1/data/transactions/logic/eval.go#L1302
exports.MAX_INPUT_BYTE_LEN = 64;
exports.MAX_OUTPUT_BYTE_LEN = 128;
exports.ZERO_ADDRESS = new Uint8Array(32);
exports.ZERO_ADDRESS_STR = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
const zeroUint64 = 0n;
const zeroByte = new Uint8Array(0);
// https://developer.algorand.org/docs/reference/teal/opcodes/#txn
// transaction fields supported by teal v1
exports.TxnFields = {
    1: {
        Sender: 'snd',
        Fee: 'fee',
        FirstValid: 'fv',
        FirstValidTime: null,
        LastValid: 'lv',
        Note: 'note',
        Lease: 'lx',
        Receiver: 'rcv',
        Amount: 'amt',
        CloseRemainderTo: 'close',
        VotePK: 'votekey',
        SelectionPK: 'selkey',
        VoteFirst: 'votefst',
        VoteLast: 'votelst',
        VoteKeyDilution: 'votekd',
        Type: 'type',
        TypeEnum: null,
        XferAsset: 'xaid',
        AssetAmount: 'aamt',
        AssetSender: 'asnd',
        AssetReceiver: 'arcv',
        AssetCloseTo: 'aclose',
        GroupIndex: null,
        TxID: null
    }
};
// transaction fields supported by teal v2
exports.TxnFields[2] = {
    ...exports.TxnFields[1],
    ApplicationID: 'apid',
    OnCompletion: 'apan',
    ApplicationArgs: 'apaa',
    NumAppArgs: null,
    Accounts: 'apat',
    NumAccounts: null,
    ApprovalProgram: 'apap',
    ClearStateProgram: 'apsu',
    RekeyTo: 'rekey',
    ConfigAsset: 'caid',
    ConfigAssetTotal: 't',
    ConfigAssetDecimals: 'dc',
    ConfigAssetDefaultFrozen: 'df',
    ConfigAssetUnitName: 'un',
    ConfigAssetName: 'an',
    ConfigAssetURL: 'au',
    ConfigAssetMetadataHash: 'am',
    ConfigAssetManager: 'm',
    ConfigAssetReserve: 'r',
    ConfigAssetFreeze: 'f',
    ConfigAssetClawback: 'c',
    FreezeAsset: 'faid',
    FreezeAssetAccount: 'fadd',
    FreezeAssetFrozen: 'afrz'
};
exports.TxnFields[3] = {
    ...exports.TxnFields[2],
    Assets: 'apas',
    NumAssets: null,
    Applications: 'apfa',
    NumApplications: null,
    GlobalNumUint: 'nui',
    GlobalNumByteSlice: 'nbs',
    LocalNumUint: 'nui',
    LocalNumByteSlice: 'nbs'
};
exports.TxnFields[4] = {
    ...exports.TxnFields[3],
    ExtraProgramPages: 'apep'
};
exports.TxnFields[5] = {
    ...exports.TxnFields[4],
    Nonparticipation: 'nonpart'
};
exports.TxnFields[6] = {
    ...exports.TxnFields[5]
};
exports.ITxnFields = {
    1: {},
    2: {},
    3: {},
    4: {},
    5: {
        Logs: null,
        NumLogs: null,
        CreatedAssetID: null,
        CreatedApplicationID: null
    }
};
exports.ITxnFields[6] = {
    ...exports.ITxnFields[5]
};
// transaction fields of type array
exports.TxArrFields = {
    1: new Set(),
    2: new Set(['Accounts', 'ApplicationArgs'])
};
exports.TxArrFields[3] = new Set([...exports.TxArrFields[2], 'Assets', 'Applications']);
exports.TxArrFields[4] = (0, lodash_clonedeep_1.default)(exports.TxArrFields[3]);
exports.TxArrFields[5] = (0, lodash_clonedeep_1.default)(exports.TxArrFields[4]);
exports.TxArrFields[6] = (0, lodash_clonedeep_1.default)(exports.TxArrFields[5]);
// itxn fields of type array
exports.ITxArrFields = {
    1: new Set(),
    2: new Set(),
    3: new Set(),
    4: new Set(),
    5: new Set(['Logs'])
};
exports.ITxArrFields[6] = (0, lodash_clonedeep_1.default)(exports.ITxArrFields[5]);
exports.TxFieldDefaults = {
    Sender: exports.ZERO_ADDRESS,
    Fee: zeroUint64,
    FirstValid: zeroUint64,
    LastValid: zeroUint64,
    Note: zeroByte,
    Lease: zeroByte,
    Receiver: exports.ZERO_ADDRESS,
    Amount: zeroUint64,
    CloseRemainderTo: exports.ZERO_ADDRESS,
    VotePK: exports.ZERO_ADDRESS,
    SelectionPK: exports.ZERO_ADDRESS,
    VoteFirst: zeroUint64,
    VoteLast: zeroUint64,
    VoteKeyDilution: zeroUint64,
    Type: zeroByte,
    TypeEnum: zeroUint64,
    XferAsset: zeroUint64,
    AssetAmount: zeroUint64,
    AssetSender: exports.ZERO_ADDRESS,
    AssetReceiver: exports.ZERO_ADDRESS,
    AssetCloseTo: exports.ZERO_ADDRESS,
    GroupIndex: zeroUint64,
    ApplicationID: zeroUint64,
    OnCompletion: zeroUint64,
    ApplicationArgs: zeroByte,
    NumAppArgs: zeroUint64,
    Accounts: zeroByte,
    NumAccounts: zeroUint64,
    ApprovalProgram: zeroByte,
    ClearStateProgram: zeroByte,
    RekeyTo: exports.ZERO_ADDRESS,
    ConfigAsset: zeroUint64,
    ConfigAssetTotal: zeroUint64,
    ConfigAssetDecimals: zeroUint64,
    ConfigAssetDefaultFrozen: zeroUint64,
    ConfigAssetUnitName: zeroByte,
    ConfigAssetName: zeroByte,
    ConfigAssetURL: zeroByte,
    ConfigAssetMetadataHash: zeroByte,
    ConfigAssetManager: exports.ZERO_ADDRESS,
    ConfigAssetReserve: exports.ZERO_ADDRESS,
    ConfigAssetFreeze: exports.ZERO_ADDRESS,
    ConfigAssetClawback: exports.ZERO_ADDRESS,
    FreezeAsset: zeroUint64,
    FreezeAssetAccount: exports.ZERO_ADDRESS,
    FreezeAssetFrozen: zeroUint64,
    Assets: zeroByte,
    NumAssets: zeroUint64,
    Applications: zeroByte,
    NumApplications: zeroUint64,
    GlobalNumUint: zeroUint64,
    GlobalNumByteSlice: zeroUint64,
    LocalNumUint: zeroUint64,
    LocalNumByteSlice: zeroUint64,
    ExtraProgramPages: zeroUint64,
    Nonparticipation: zeroUint64
};
exports.AssetParamMap = {
    1: {
        AssetTotal: 'total',
        AssetDecimals: 'decimals',
        AssetDefaultFrozen: 'defaultFrozen',
        AssetUnitName: 'unitName',
        AssetName: 'name',
        AssetURL: 'url',
        AssetMetadataHash: 'metadataHash',
        AssetManager: 'manager',
        AssetReserve: 'reserve',
        AssetFreeze: 'freeze',
        AssetClawback: 'clawback' // Clawback address
    }
};
exports.AssetParamMap[2] = { ...exports.AssetParamMap[1] };
exports.AssetParamMap[3] = { ...exports.AssetParamMap[2] };
exports.AssetParamMap[4] = { ...exports.AssetParamMap[3] };
exports.AssetParamMap[5] = {
    ...exports.AssetParamMap[4],
    AssetCreator: 'creator'
};
exports.AssetParamMap[6] = { ...exports.AssetParamMap[5] };
// app param use for app_params_get opcode
exports.AppParamDefined = {
    1: new Set(),
    2: new Set(),
    3: new Set(),
    4: new Set(),
    5: new Set([
        "AppApprovalProgram",
        "AppClearStateProgram",
        "AppGlobalNumUint",
        "AppGlobalNumByteSlice",
        "AppLocalNumUint",
        "AppLocalNumByteSlice",
        "AppExtraProgramPages",
        "AppCreator",
        "AppAddress"
    ])
};
exports.AppParamDefined[6] = (0, lodash_clonedeep_1.default)(exports.AppParamDefined[5]);
exports.reDigit = /^\d+$/;
exports.reDec = /^(0|[1-9]\d*)$/;
exports.reHex = /^0x[0-9a-fA-F]+$/;
exports.reOct = /^0[0-8]+$/;
/** is Base64 regex
 * ^                          # Start of input
 * ([0-9a-zA-Z+/]{4})*        # Groups of 4 valid characters decode
 *                            # to 24 bits of data for each group
 * (                          # Either ending with:
 *     ([0-9a-zA-Z+/]{2}==)   # two valid characters followed by ==
 *     |                      # , or
 *     ([0-9a-zA-Z+/]{3}=)    # three valid characters followed by =
 * )?                         # , or nothing
 * $                          # End of input
 */
exports.reBase64 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
// A-Z and 2-7 repeated, with optional `=` at the end
exports.reBase32 = /^[A-Z2-7]+=*$/;
// reference for values: https://github.com/algorand/go-algorand/blob/master/config/consensus.go#L510
// for fields: https://developer.algorand.org/docs/reference/teal/opcodes/#global
// global field supported by teal v1
exports.GlobalFields = {
    1: {
        MinTxnFee: exports.ALGORAND_MIN_TX_FEE,
        MinBalance: 10000,
        MaxTxnLife: 1000,
        ZeroAddress: exports.ZERO_ADDRESS,
        GroupSize: null
    }
};
// global field supported by teal v2
// Note: Round, LatestTimestamp are dummy values and these are overrided by runtime class's
// round and timestamp
exports.GlobalFields[2] = {
    ...exports.GlobalFields[1],
    LogicSigVersion: exports.MaxTEALVersion,
    Round: 1,
    LatestTimestamp: 1,
    CurrentApplicationID: null
};
// global fields supported by tealv3
exports.GlobalFields[3] = {
    ...exports.GlobalFields[2],
    CreatorAddress: null
};
// global fields supported by tealv4
exports.GlobalFields[4] = {
    ...exports.GlobalFields[3]
};
// global fields supported by tealv5
exports.GlobalFields[5] = {
    ...exports.GlobalFields[4],
    GroupID: null,
    CurrentApplicationAddress: null
};
// global fields supported in tealv6
exports.GlobalFields[6] = { ...exports.GlobalFields[5] };
// creating map for opcodes whose cost is other than 1
exports.OpGasCost = {
    // v1 opcodes cost
    1: {
        sha256: 7,
        sha512_256: 9,
        keccak256: 26,
        ed25519verify: 1900
    }
};
// v2 opcodes cost
exports.OpGasCost[2] = {
    ...exports.OpGasCost[1],
    sha256: 35,
    sha512_256: 45,
    keccak256: 130
};
/**
 * In tealv3, cost of crypto opcodes are same as v2.
 * All other opcodes have cost 1
 */
exports.OpGasCost[3] = { ...exports.OpGasCost[2] };
/*
 * tealv4
 */
exports.OpGasCost[4] = {
    ...exports.OpGasCost[3],
    'b+': 10,
    'b-': 10,
    'b*': 20,
    'b/': 20,
    'b%': 20,
    'b|': 6,
    'b&': 6,
    'b^': 6,
    'b~': 4
};
/**
 * teal v5
 */
exports.OpGasCost[5] = {
    ...exports.OpGasCost[4],
    ecdsa_verify: 1700,
    ecdsa_pk_decompress: 650,
    ecdsa_pk_recover: 2000
};
exports.OpGasCost[6] = { ...exports.OpGasCost[5] };
// tealv5 supported types (typeEnum -> type mapping)
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/#txn-f
exports.TxnTypeMap = {
    1: 'pay',
    3: 'acfg',
    4: 'axfer',
    5: 'afrz'
};
/**
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/specification/#typeenum-constants
 */
var TransactionTypeEnum;
(function (TransactionTypeEnum) {
    TransactionTypeEnum["UNKNOWN"] = "unknown";
    TransactionTypeEnum["PAYMENT"] = "pay";
    TransactionTypeEnum["KEY_REGISTRATION"] = "keyreg";
    TransactionTypeEnum["ASSET_CONFIG"] = "acfg";
    TransactionTypeEnum["ASSET_TRANSFER"] = "axfer";
    TransactionTypeEnum["ASSET_FREEZE"] = "afrz";
    TransactionTypeEnum["APPLICATION_CALL"] = "appl";
})(TransactionTypeEnum = exports.TransactionTypeEnum || (exports.TransactionTypeEnum = {}));
//# sourceMappingURL=constants.js.map