"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PyCompileOp = exports.ASSETS_DIR = exports.pyExt = exports.tealExt = void 0;
const web_1 = require("@algo-builder/web");
const child_process_1 = require("child_process");
const yaml_1 = __importDefault(require("yaml"));
const files_1 = require("./files");
exports.tealExt = ".teal";
exports.pyExt = ".py";
exports.ASSETS_DIR = "assets";
class PyCompileOp {
    /**
     * Returns TEAL code from pyteal file (pyTEAL --> TEAL)
     * @param filename : name of the PyTeal code in `/assets` directory.
     *                   Examples : [ gold.py, asa.py]
     *                   MUST have .py extension
     * @param scTmplParams: Smart contract template parameters (used only when compiling PyTEAL to TEAL)
     * @param logs only show logs on console when set as true. By default this value is true
     */
    ensurePyTEALCompiled(filename, scTmplParams, logs = true) {
        if (!filename.endsWith(exports.pyExt)) {
            throw new Error(`filename "${filename}" must end with "${exports.pyExt}"`);
        }
        const [replaceParams, param] = this.parseScTmplParam(scTmplParams, logs);
        let content = this.compilePyTeal(filename, param);
        if (yaml_1.default.stringify({}) !== yaml_1.default.stringify(replaceParams)) {
            content = this.replaceTempValues(content, replaceParams);
        }
        return content;
    }
    /**
     * Parses scTmplParams and returns ReplaceParams and stringify object
     * @param scTmplParams smart contract template parameters
     * @param logs only show logs on console when set as true. By default this value is true
     */
    parseScTmplParam(scTmplParams, logs = true) {
        let param;
        const replaceParams = {};
        if (scTmplParams === undefined) {
            param = undefined;
        }
        else {
            const tmp = {};
            for (const key in scTmplParams) {
                if (key.startsWith("TMPL_") || key.startsWith("tmpl_")) {
                    replaceParams[key] = scTmplParams[key].toString();
                }
                else {
                    tmp[key] = scTmplParams[key];
                }
            }
            if (logs) {
                console.log("PyTEAL template parameters:", tmp);
            }
            param = yaml_1.default.stringify(tmp);
        }
        if (logs) {
            console.log("TEAL replacement parameters:", replaceParams);
        }
        return [replaceParams, param];
    }
    /**
     * Replaces keys with the values in program using replaceParams
     * @param program Teal program in string
     * @param replaceParams params that needs to be replaced in program
     */
    replaceTempValues(program, replaceParams) {
        for (const param in replaceParams) {
            program = program.split(param).join(replaceParams[param]);
        }
        return program;
    }
    /**
     * Description: Runs a subprocess to execute python script
     * @param filename : python filename in assets folder
     * @param scInitParam : Smart contract initialization parameters.
     */
    runPythonScript(filename, scInitParam) {
        const filePath = (0, files_1.getPathFromDirRecursive)(exports.ASSETS_DIR, filename);
        // used spawnSync instead of spawn, as it is synchronous
        if (scInitParam === undefined) {
            return (0, child_process_1.spawnSync)('python3', [
                filePath
            ], { encoding: 'utf8' });
        }
        return (0, child_process_1.spawnSync)('python3', [
            filePath,
            scInitParam
        ], { encoding: 'utf8' });
    }
    /**
     * Description: returns TEAL code using pyTeal compiler
     * @param filename : python filename in assets folder
     * @param scInitParam : Smart contract initialization parameters.
     */
    compilePyTeal(filename, scInitParam) {
        const subprocess = this.runPythonScript(filename, scInitParam);
        if (subprocess.stderr) {
            throw new web_1.BuilderError(web_1.ERRORS.PyTEAL.PYTEAL_FILE_ERROR, {
                filename: filename,
                reason: subprocess.stderr
            });
        }
        return subprocess.stdout;
    }
}
exports.PyCompileOp = PyCompileOp;
//# sourceMappingURL=pycompile-op.js.map