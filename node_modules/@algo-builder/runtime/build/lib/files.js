"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPathFromDirRecursive = exports.lsTreeWalk = exports.loadFromYamlFileSilentWithMessage = exports.loadFromYamlFileSilent = void 0;
const fsWalk = __importStar(require("@nodelib/fs.walk"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const yaml_1 = __importDefault(require("yaml"));
const errors_list_1 = require("../errors/errors-list");
const runtime_errors_1 = require("../errors/runtime-errors");
function readYAML(filePath, options) {
    return yaml_1.default.parse(fs_1.default.readFileSync(filePath).toString(), options);
}
function defaultYamlValue(options) {
    if (options?.mapAsMap) {
        return new Map();
    }
    return {};
}
function loadFromYamlFileSilent(filePath, options) {
    // Try-catch is the way:
    // https://nodejs.org/docs/latest/api/fs.html#fs_fs_stat_path_options_callback
    // Instead, user code should open/read/write the file directly and
    // handle the error raised if the file is not available
    try {
        return readYAML(filePath, options);
    }
    catch (e) {
        return defaultYamlValue(options);
    }
}
exports.loadFromYamlFileSilent = loadFromYamlFileSilent;
function loadFromYamlFileSilentWithMessage(filePath, messageIfNotPresent, options) {
    try {
        return readYAML(filePath, options);
    }
    catch (e) {
        console.warn(messageIfNotPresent);
        return defaultYamlValue(options);
    }
}
exports.loadFromYamlFileSilentWithMessage = loadFromYamlFileSilentWithMessage;
/**
 * Reads the directory recursively and returns all paths
 * @param directoryName name of directory
 */
function lsTreeWalk(directoryName) {
    return fsWalk.walkSync(directoryName).map(f => f.path);
}
exports.lsTreeWalk = lsTreeWalk;
;
/**
 * Searches recursively and returns path of file in a given directory. Throws error
 * if multiple files with same name are found (in directory or sub-directory)
 * @param dir directory name
 * @param fileName name of file to search in directory
 * @param warnMsg if file does not exist & warning message is passed,
 * then console log warning, and return. throws error otherwise
 */
function getPathFromDirRecursive(dir, fileName, warnMsg) {
    const paths = lsTreeWalk(dir);
    let filePath;
    for (const p of paths) {
        const fileNameFromPath = path_1.default.basename(p);
        if (fileNameFromPath === fileName) {
            if (filePath) { // if file already found previously, throw error
                throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.GENERAL.MULTIPLE_FILES_WITH_SAME_NAME_IN_DIR, {
                    directory: dir,
                    file: fileName,
                    path1: filePath,
                    path2: p
                });
            }
            else {
                filePath = p;
            }
        }
    }
    if (!filePath) {
        if (warnMsg) {
            console.warn(warnMsg);
            return;
        }
        throw new runtime_errors_1.RuntimeError(errors_list_1.RUNTIME_ERRORS.GENERAL.FILE_NOT_FOUND_IN_DIR, {
            file: fileName,
            directory: dir
        });
    }
    return filePath;
}
exports.getPathFromDirRecursive = getPathFromDirRecursive;
//# sourceMappingURL=files.js.map