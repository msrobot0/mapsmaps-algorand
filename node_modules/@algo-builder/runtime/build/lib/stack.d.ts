export interface IStack<T> {
    push: (item: T) => void;
    pop: () => T;
    length: () => number;
    debug: (depth: number) => T[];
}
export declare class Stack<T> implements IStack<T> {
    private readonly capacity;
    private readonly _store;
    constructor(capacity?: number);
    length(): number;
    push(item: T): void;
    pop(): T;
    /**
     * returns an array of top elements of stack (upto depth = depth)
     * @param depth no. of elements to return (from top of stack). If depth > stack.length,
     * then a copy of entire stack is returned
     */
    debug(depth: number): T[];
}
