import { types } from "@algo-builder/web";
import { Account as AccountSDK, Address, modelsv2 } from "algosdk";
import { AccountAddress, AccountStoreI, AppDeploymentFlags, AppLocalStateM, AssetHoldingM, CreatedAppM, RuntimeAccountI, SSCAttributesM, StackElem } from "./types";
export declare class RuntimeAccount implements RuntimeAccountI {
    readonly sk: Uint8Array;
    readonly addr: string;
    name?: string;
    spend: types.AccountAddress;
    constructor(account: AccountSDK, name?: string);
    rekeyTo(authAccountAddress: types.AccountAddress): void;
    getSpendAddress(): types.AccountAddress;
}
export declare class AccountStore implements AccountStoreI {
    readonly account: RuntimeAccountI;
    readonly address: string;
    minBalance: number;
    assets: Map<number, AssetHoldingM>;
    amount: bigint;
    appsLocalState: Map<number, AppLocalStateM>;
    appsTotalSchema: modelsv2.ApplicationStateSchema;
    createdApps: Map<number, SSCAttributesM>;
    createdAssets: Map<number, modelsv2.AssetParams>;
    constructor(balance: number | bigint, account?: AccountSDK | string);
    balance(): bigint;
    rekeyTo(authAccountAddress: types.AccountAddress): void;
    getSpendAddress(): AccountAddress;
    /**
     * Fetches local state value for key present in account
     * returns undefined otherwise
     * @param appID: current application id
     * @param key: key to fetch value of from local state
     */
    getLocalState(appID: number, key: Uint8Array | string): StackElem | undefined;
    /**
     * Set new key-value pair or update pair with existing key in account
     * for application id: appID, throw error otherwise
     * @param appID: current application id
     * @param key: key to fetch value of from local state
     * @param value: value of key to put in local state
     * @param line line number in TEAL file
     * Note: if user is accessing this function directly through runtime,
     * then line number is unknown
     */
    setLocalState(appID: number, key: Uint8Array | string, value: StackElem, line?: number): AppLocalStateM;
    /**
     * Queries app global state value. Returns `undefined` if the key is not present.
     * @param appID: current application id
     * @param key: key to fetch value of from local state
     */
    getGlobalState(appID: number, key: Uint8Array | string): StackElem | undefined;
    /**
     * Updates app global state.
     * Throws error if app is not found.
     * @param appID: application id
     * @param key: app global state key
     * @param value: value associated with a key
     */
    setGlobalState(appID: number, key: Uint8Array | string, value: StackElem, line?: number): void;
    /**
     * Queries application by application index from account's global state.
     * Returns undefined if app is not found.
     * @param appID application index
     */
    getApp(appID: number): SSCAttributesM | undefined;
    /**
     * Queries application by application index from account's local state.
     * Returns undefined if app is not found.
     * @param appID application index
     */
    getAppFromLocal(appID: number): AppLocalStateM | undefined;
    /**
     * Queries asset definition by assetId
     * @param assetId asset index
     */
    getAssetDef(assetId: number): modelsv2.AssetParams | undefined;
    /**
     * Queries asset holding by assetId
     * @param assetId asset index
     */
    getAssetHolding(assetId: number): AssetHoldingM | undefined;
    /**
     * Deploy Asset in account's state
     * @param assetId Asset Index
     * @param name Asset Name
     * @param asaDef Asset Definitions
     */
    addAsset(assetId: number, name: string, asaDef: types.ASADef): modelsv2.AssetParams;
    /**
     * Modifies Asset fields
     * @param assetId Asset Index
     * @param fields Fields for modification
     */
    modifyAsset(assetId: number, fields: types.AssetModFields): void;
    /**
     * removes asset holding from account
     * @param assetId asset index
     */
    closeAsset(assetId: number): void;
    /**
     * Freeze asset
     * @param assetId Asset Index
     * @state new freeze state
     */
    setFreezeState(assetId: number, state: boolean): void;
    /**
     * Destroys asset
     * @param assetId Asset Index
     */
    destroyAsset(assetId: number): void;
    /**
     * Deploy application in account's state
     * check maximum account creation limit
     * @param appID application index
     * @param params SSCDeployment Flags
     * @param approvalProgram application approval program
     * @param clearProgram application clear program
     * NOTE - approval and clear program must be the TEAL code as string
     */
    addApp(appID: number, params: AppDeploymentFlags, approvalProgram: string, clearProgram: string): CreatedAppM;
    optInToApp(appID: number, appParams: SSCAttributesM): void;
    optInToASA(assetIndex: number, assetHolding: AssetHoldingM): void;
    deleteApp(appID: number): void;
    closeApp(appID: number): void;
}
export interface BaseModel {
    attribute_map: Record<string, string>;
    _is_primitive: (val: any) => val is string | boolean | number | bigint;
    _is_address: (val: any) => val is Address;
    _get_obj_for_encoding(val: Function): Record<string, any>;
    _get_obj_for_encoding(val: any[]): any[];
    _get_obj_for_encoding(val: Record<string, any>): Record<string, any>;
    get_obj_for_encoding(): Record<string, any>;
}
export declare class BaseModelI implements BaseModel {
    attribute_map: Record<string, string>;
    constructor();
    _is_primitive(val: any): val is string | boolean | number | bigint;
    _is_address(val: any): val is Address;
    _get_obj_for_encoding(val: Function): Record<string, any>;
    _get_obj_for_encoding(val: any[]): any[];
    get_obj_for_encoding(): Record<string, any>;
}
