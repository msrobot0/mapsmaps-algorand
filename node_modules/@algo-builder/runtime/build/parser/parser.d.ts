import { Interpreter } from "../interpreter/interpreter";
import { ExecutionMode, Operator } from "../types";
/**
 * Description: Read line and split it into words
 * - ignore comments, keep only part that is relevant to interpreter
 * @param line : Line read from TEAL file
 */
export declare function wordsFromLine(line: string): string[];
/**
 * Description: Returns Opcode object for given field
 * NOTE: we are also calculating the gas cost associated with each opcode,
 * and throwing error if the total gas of TEAL code exceeds the max gas cost for
 * respective execution modes
 * @param words : words extracted from line
 * @param counter: line number in TEAL file
 * @param interpreter: interpreter object
 */
export declare function opcodeFromSentence(words: string[], counter: number, interpreter: Interpreter): Operator;
/**
 * verify max cost of TEAL code is within consensus parameters
 * @param gas total cost consumed by the TEAL code (can be dynamic or static)
 * @param mode Execution mode - Signature (stateless) OR Application (stateful)
 * @param maxPooledApplCost Since AVM 1.0, opcode cost for APPLICATION mode can be pooled accross
 * multiple transactions. If passed, gas is evaluated against maxPooledApplCost
 */
export declare function assertMaxCost(gas: number, mode: ExecutionMode, maxPooledApplCost?: number): void;
/**
 * Description: Returns a list of Opcodes object after reading text from given TEAL file
 * @param program : TEAL code as string
 * @param mode : execution mode of TEAL code (Stateless or Application)
 * @param interpreter: interpreter object
 */
export declare function parser(program: string, mode: ExecutionMode, interpreter: Interpreter): Operator[];
