import type { TEALStack } from "../types";
export declare class Op {
    /**
     * assert stack length is atleast minLen
     * @param stack TEAL stack
     * @param minLen length to check from
     * @param line line number in TEAL file
     */
    assertMinStackLen(stack: TEALStack, minLen: number, line: number): void;
    /**
     * asserts number is less than or equal to value(MAX_UINT64, MAX_UINT128)
     * @param num number to check
     * @param line line number in TEAL file
     * @param value max value
     */
    checkOverflow(num: bigint, line: number, value: bigint): void;
    /**
     * asserts number is greater than MIN_UINT64 (0n)
     * @param num number to check
     * @param line line number in TEAL file
     */
    checkUnderflow(num: bigint, line: number): void;
    /**
     * asserts if index exist in given array
     * @param idx index number
     * @param arr array to check from
     * @param line line number in TEAL file
     */
    checkIndexBound(idx: number, arr: any[], line: number): void;
    /**
     * asserts if array length is less than equal to MAX_UINT8 (255) and not equal to 0
     * @param arr array
     * @param line line number in TEAL file
     */
    assertArrLength(arr: Uint8Array[] | BigInt[], line: number): void;
    /**
     * asserts if given variable type is bigint
     * @param a variable
     * @param line line number in TEAL file
     */
    assertBigInt(a: unknown, line: number): bigint;
    assertUInt8(a: unknown, line: number): number;
    /**
     * asserts if given variable type is bytes
     * @param b variable
     * @param line line number in TEAL file
     * @param maxlen maximum allowed length of bytes
     */
    assertBytes(b: unknown, line: number, maxlen?: number): Uint8Array;
    /**
     * asserts if given variable type is address
     * @param a - value to assert (should in bytes)
     * @param line - line number in TEAL file
     */
    assertAlgorandAddress(a: unknown, line: number): Uint8Array;
    /**
     * asserts if given bigint is an 8 bit unsigned integer
     * @param a  value to assert (in bigint)
     * @param line line number in TEAL file
     */
    assertUint8(a: bigint, line: number): bigint;
    /**
     * asserts if given index lies in 64 bit unsigned integer
     * @param index Index
     * @param line line number in TEAL file
     */
    assert64BitIndex(index: bigint, line: number): void;
    /**
     * asserts if given index lies in bytes array
     * @param index Index
     * @param array bytes array
     * @param line line number in TEAL file
     */
    assertBytesIndex(index: number, array: Uint8Array, line: number): void;
    /**
     * Returns substring from given string (if it exists)
     * @param byteString given string as bytes
     * @param start starting index
     * @param end ending index
     * @param line line number in TEAL file
     */
    subString(byteString: Uint8Array, start: bigint, end: bigint, line: number): Uint8Array;
    /**
     * asserts if known transaction field is passed
     * @param str transaction field
     * @param tealVersion version of TEAL
     * @param line line number in TEAL file
     */
    assertTxFieldDefined(str: string, tealVersion: number, line: number): void;
    /**
     * asserts if known transaction field of type array is passed
     * @param str transaction field
     * @param tealVersion version of TEAL
     * @param line line number in TEAL file
     */
    assertTxArrFieldDefined(str: string, tealVersion: number, line: number): void;
    /**
     * asserts if known itxn field is passed
     * @param str itxn field
     * @param tealVersion version of TEAL
     * @param line line number in TEAL file
     */
    assertITxFieldDefined(str: string, tealVersion: number, line: number): void;
    /**
     * asserts if known itxn field of type array is passed
     * @param str itxn field
     * @param tealVersion version of TEAL
     * @param line line number in TEAL file
     */
    assertITxArrFieldDefined(str: string, tealVersion: number, line: number): void;
    /**
     * asserts if known global field is passed
     * @param str global field
     * @param tealVersion version of TEAL
     * @param line line number in TEAL file
     */
    assertGlobalDefined(str: string, tealVersion: number, line: number): void;
    /**
     * Push 1n if boolean is true else push 0n. Returns TEAL stack
     * @param stack TEAL stack
     * @param ok boolean
     */
    pushBooleanCheck(stack: TEALStack, ok: boolean): TEALStack;
    /**
     * Returns range of bytes from A starting at S up to but not including S+L,
     * If S or S+L is larger than the array length, throw error
     * @param array Uint8array
     * @param start starting point in array
     * @param length length of substring
     */
    opExtractImpl(array: Uint8Array, start: number, length: number): Uint8Array;
}
