import { modelsv2 } from "algosdk";
import { Runtime } from "../index";
import { Stack } from "../lib/stack";
import { AccountStoreI, EncTx, ExecutionMode, Operator, SSCAttributesM, StackElem, TEALStack } from "../types";
import { Op } from "./opcode";
/**
 * Interpreter parses and executes a TEAL code. Each transaction is using a new instance of
 * interpreter and doesn't share the interpreter state. When executing the transaction
 * we create a Context (`ctx`) and pass it to the interpreter. It encapsulates
 * runtime state and the transaction group state (eg shared scratch space).
 * Interpreter must not modify the `runtime` - the latter will be updated during the context
 * commit phase once all transactions in the groups succeed.
 */
export declare class Interpreter {
    readonly stack: TEALStack;
    tealVersion: number;
    lineToCost: {
        [key: number]: number;
    };
    gas: number;
    length: number;
    bytecblock: Uint8Array[];
    intcblock: BigInt[];
    scratch: StackElem[];
    instructions: Operator[];
    instructionIndex: number;
    runtime: Runtime;
    callStack: Stack<number>;
    labelMap: Map<string, number>;
    subTxn: EncTx | undefined;
    innerTxns: EncTx[];
    constructor();
    /**
     * Queries ASA Definitions data by assetID.  Returns undefined if ASA is not deployed.
     * @param assetId Asset Index
     */
    getAssetDef(assetId: number): modelsv2.AssetParams | undefined;
    /**
     * Queries app (SSCAttributesM) from state. Throws TEAL.APP_NOT_FOUND if app is not found.
     * @param appID Application Index
     */
    getApp(appID: number, line: number): SSCAttributesM;
    /**
     * Beginning from TEALv4, user can directly pass address instead of index to Txn.Accounts.
     * However, the address must still be present in tx.Accounts OR should be equal to Txn.Sender
     * @param accountPk public key of account
     * @param line line number in TEAL file
     * https://developer.algorand.org/articles/introducing-algorand-virtual-machine-avm-09-release/
     */
    private _getAccountFromAddr;
    /**
     * Queries account by accountIndex or `ctx.tx.snd` (if `accountIndex==0`).
     * If account address is passed, then queries account by address.
     * Throws exception if account is not found.
     * @param accountRef index of account to fetch from account list
     * @param line line number
     * NOTE: index 0 represents txn sender account
     */
    getAccount(accountRef: StackElem, line: number): AccountStoreI;
    /**
     * Queries appIndex by app reference (offset to foreignApps array OR index directly)
     * + Since TEALv4, any reference is supported (but it must be present in foreignApps array)
     * + For older versions, if foreign === true, reference is treated as offset to foreignApps array,
     * otherwise it is treated as a direct reference.
     * @param appRef an offset to foreign app array OR appID
     * @param foreign for older teal versions(<= 3), foreign bool represent if ref is
     * treated as an offset/appIndex
     * @param line line number
     * https://developer.algorand.org/articles/introducing-algorand-virtual-machine-avm-09-release/
     */
    getAppIDByReference(appRef: number, foreign: boolean, line: number, op: Op): number;
    /**
     * Queries assetIndex by asset reference (offset to foreignAssets array OR index directly)
     * + Since TEALv4, any reference is supported (but it must be present in foreign assets array)
     * + For older versions, if foreign === true, reference is treated as offset to foreignAssets array,
     * otherwise it is treated as a direct reference.
     * @param assetRef an offset to foreign assets array OR assetID
     * @param foreign for older teal versions(<= 3), foreign bool represent if
     * ref is treated as an offset/assetIndex
     * @param line line number
     * https://developer.algorand.org/articles/introducing-algorand-virtual-machine-avm-09-release/
     */
    getAssetIDByReference(assetRef: number, foreign: boolean, line: number, op: Op): number;
    /**
     * Queries application by application index. Returns undefined if app is not found.
     * @param appID: current application id
     * @param key: key to fetch value of from local state
     */
    getGlobalState(appID: number, key: Uint8Array | string, line: number): StackElem | undefined;
    /**
     * Updates app global state.
     * Throws error if app is not found.
     * @param appID: application id
     * @param key: app global state key
     * @param value: value associated with a key
     */
    setGlobalState(appID: number, key: Uint8Array | string, value: StackElem, line: number): void;
    /**
     * Description: moves instruction index to "label", throws error if label not found
     * @param label: branch label
     * @param line: line number
     */
    jumpForward(label: string, line: number): void;
    /**
     * Description: moves instruction index to "label", throws error if label not found
     * @param label: branch label
     * @param line: line number
     */
    jumpToLabel(label: string, line: number): void;
    /**
     * logs TEALStack upto depth = debugStack to console
     * @param instruction interpreter opcode instance
     * @param debugStack max no. of elements to print from top of stack
     */
    printStack(instruction: Operator, debugStack?: number): void;
    /**
     * Maps labels with indexes according to instructions array
     */
    mapLabelWithIndexes(): void;
    assertValidTxArray(): void;
    /**
     * This function executes TEAL code after parsing
     * @param program: teal code
     * @param mode : execution mode of TEAL code (Stateless or Stateful)
     * @param runtime : runtime object
     * @param debugStack: if passed then TEAL Stack is logged to console after
     * each opcode execution (upto depth = debugStack)
     */
    execute(program: string, mode: ExecutionMode, runtime: Runtime, debugStack?: number): void;
    /**
     * This function executes TEAL code after parsing and returns the result of the program.
     * @param program: teal code
     * @param mode : execution mode of TEAL code (smart signature or contract)
     * @param runtime : runtime object
     * @param debugStack: if passed then TEAL Stack is logged to console after
     * each opcode execution (upto depth = debugStack)
     * @returns The final result on the stack or undefined if nothing was on the stack.
     * NOTE: program should fail if there is no result (stack is empty after the execution) or
     *       the result is zero.
     */
    executeWithResult(program: string, mode: ExecutionMode, runtime: Runtime, debugStack?: number): StackElem | undefined;
}
