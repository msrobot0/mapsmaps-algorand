import { MathOp } from "../lib/constants";
import { Stack } from "../lib/stack";
import { EncodingType, StackElem, TEALStack } from "../types";
import { Interpreter } from "./interpreter";
import { Op } from "./opcode";
export declare class Pragma extends Op {
    readonly version: number;
    readonly line: number;
    /**
     * Store Pragma version
     * @param args Expected arguments: ["version", version number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    getVersion(): number;
    execute(stack: TEALStack): void;
}
export declare class Len extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Add extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Sub extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Div extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Mul extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Arg extends Op {
    index: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Gets the argument value from interpreter.args array.
     * store the value in _arg variable
     * @param args Expected arguments: [argument number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Bytecblock extends Op {
    readonly bytecblock: Uint8Array[];
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Store blocks of bytes in bytecblock
     * @param args Expected arguments: [bytecblock] // Ex: ["value1" "value2"]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Bytec extends Op {
    readonly index: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Sets index according to arguments passed
     * @param args Expected arguments: [byteblock index number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Intcblock extends Op {
    readonly intcblock: Array<bigint>;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores block of integer in intcblock
     * @param args Expected arguments: [integer block] // Ex: [100 200]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Intc extends Op {
    readonly index: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Sets index according to arguments passed
     * @param args Expected arguments: [intcblock index number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Mod extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class BitwiseOr extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class BitwiseAnd extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class BitwiseXor extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class BitwiseNot extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Store extends Op {
    readonly index: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores index number according to arguments passed
     * @param args Expected arguments: [index number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Load extends Op {
    index: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores index number according to arguments passed.
     * @param args Expected arguments: [index number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Err extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Sha256 extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Sha512_256 extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Keccak256 extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Ed25519verify extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class LessThan extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class GreaterThan extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class LessThanEqualTo extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class GreaterThanEqualTo extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class And extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Or extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class EqualTo extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class NotEqualTo extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Not extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Itob extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Btoi extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Addw extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Mulw extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Pop extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Dup extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Dup2 extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Concat extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Substring extends Op {
    readonly start: bigint;
    readonly end: bigint;
    readonly line: number;
    /**
     * Stores values of `start` and `end` according to arguments passed.
     * @param args Expected arguments: [start index number, end index number]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Substring3 extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Txn extends Op {
    readonly field: string;
    readonly idx: number | undefined;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Set transaction field according to arguments passed
     * @param args Expected arguments: [transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Gtxn extends Op {
    readonly field: string;
    readonly txFieldIdx: number | undefined;
    readonly interpreter: Interpreter;
    readonly line: number;
    protected txIdx: number;
    /**
     * Sets `field`, `txIdx` values according to arguments passed.
     * @param args Expected arguments: [transaction group index, transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * push value of an array field from current transaction to stack
 * push to stack [...stack, value of an array field ]
 * NOTE: a) for arg="Accounts" index 0 means sender's address, and index 1 means first address
 * from accounts array (eg. txna Accounts 1: will push 1st address from Accounts[] to stack)
 * b) for arg="ApplicationArgs" index 0 means first argument for application array (normal indexing)
 */
export declare class Txna extends Op {
    readonly field: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    idx: number;
    /**
     * Sets `field` and `idx` values according to arguments passed.
     * @param args Expected arguments: [transaction field, transaction field array index]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * push value of a field to the stack from a transaction in the current transaction group
 * push to stack [...stack, value of field]
 * NOTE: for arg="Accounts" index 0 means sender's address, and index 1 means first address from accounts
 * array (eg. gtxna 0 Accounts 1: will push 1st address from Accounts[](from the 1st tx in group) to stack)
 * b) for arg="ApplicationArgs" index 0 means first argument for application array (normal indexing)
 */
export declare class Gtxna extends Op {
    readonly field: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    idx: number;
    protected txIdx: number;
    /**
     * Sets `field`(Transaction Field), `idx`(Array Index) and
     * `txIdx`(Transaction Group Index) values according to arguments passed.
     * @param args Expected arguments:
     * [transaction group index, transaction field, transaction field array index]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Label extends Op {
    readonly label: string;
    readonly line: number;
    /**
     * Sets `label` according to arguments passed.
     * @param args Expected arguments: [label]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Branch extends Op {
    readonly label: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Sets `label` according to arguments passed.
     * @param args Expected arguments: [label of branch]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Branchv4 extends Branch {
    execute(stack: TEALStack): void;
}
export declare class BranchIfZero extends Op {
    readonly label: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Sets `label` according to arguments passed.
     * @param args Expected arguments: [label of branch]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class BranchIfZerov4 extends BranchIfZero {
    execute(stack: TEALStack): void;
}
export declare class BranchIfNotZero extends Op {
    readonly label: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Sets `label` according to arguments passed.
     * @param args Expected arguments: [label of branch]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class BranchIfNotZerov4 extends BranchIfNotZero {
    execute(stack: TEALStack): void;
}
export declare class Return extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Global extends Op {
    readonly field: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores global field to query as string
     * @param args Expected arguments: [field] // Ex: ["GroupSize"]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppOptedIn extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppLocalGet extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppLocalGetEx extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppGlobalGet extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppGlobalGetEx extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppLocalPut extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppGlobalPut extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppLocalDel extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class AppGlobalDel extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Balance extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts if arguments length is zero
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter Interpreter Object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class GetAssetHolding extends Op {
    readonly interpreter: Interpreter;
    readonly field: string;
    readonly line: number;
    /**
     * Sets field according to arguments passed.
     * @param args Expected arguments: [Asset Holding field]
     * // Note: Asset holding field will be string
     * For ex: `AssetBalance` is correct `0` is not.
     * @param line line number in TEAL file
     * @param interpreter Interpreter Object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class GetAssetDef extends Op {
    readonly interpreter: Interpreter;
    readonly field: string;
    readonly line: number;
    /**
     * Sets transaction field according to arguments passed
     * @param args Expected arguments: [Asset Params field]
     * // Note: Asset Params field will be string
     * For ex: `AssetTotal` is correct `0` is not.
     * @param line line number in TEAL file
     * @param interpreter Interpreter Object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/** Pseudo-Ops **/
export declare class Int extends Op {
    readonly uint64: bigint;
    readonly line: number;
    /**
     * Sets uint64 variable according to arguments passed.
     * @param args Expected arguments: [number]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Byte extends Op {
    readonly str: string;
    readonly encoding: EncodingType;
    readonly line: number;
    /**
     * Sets `str` and  `encoding` values according to arguments passed.
     * @param args Expected arguments: [data string]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Addr extends Op {
    readonly addr: string;
    readonly line: number;
    /**
     * Sets `addr` value according to arguments passed.
     * @param args Expected arguments: [Address]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Assert extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class PushInt extends Op {
    /**
     * NOTE: in runtime this class is similar to Int, but from tealv3 perspective this is optimized
     * because pushint args are not added to the intcblock during assembly processes
     */
    readonly uint64: bigint;
    readonly line: number;
    /**
     * Sets uint64 variable according to arguments passed.
     * @param args Expected arguments: [number]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class PushBytes extends Op {
    /**
     * NOTE: in runtime this class is similar to Byte, but from tealv3 perspective this is optimized
     * because pushbytes args are not added to the bytecblock during assembly processes
     */
    readonly str: string;
    readonly encoding: EncodingType;
    readonly line: number;
    /**
     * Sets `str` and  `encoding` values according to arguments passed.
     * @param args Expected arguments: [data string]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Swap extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
/**
 * bit indexing begins with low-order bits in integers.
 * Setting bit 4 to 1 on the integer 0 yields 16 (int 0x0010, or 2^4).
 * Indexing begins in the first bytes of a byte-string
 * (as seen in getbyte and substring). Setting bits 0 through 11 to 1
 * in a 4 byte-array of 0s yields byte 0xfff00000
 * Pops from stack: [ ... stack, {any A}, {uint64 B}, {uint64 C} ]
 * Pushes to stack: [ ...stack, uint64 ]
 * pop a target A, index B, and bit C. Set the Bth bit of A to C, and push the result
 */
export declare class SetBit extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
/**
 * pop a target A (integer or byte-array), and index B. Push the Bth bit of A.
 * Pops from stack: [ ... stack, {any A}, {uint64 B}]
 * Pushes to stack: [ ...stack, uint64]
 */
export declare class GetBit extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
/**
 * pop a byte-array A, integer B, and
 * small integer C (between 0..255). Set the Bth byte of A to C, and push the result
 * Pops from stack: [ ...stack, {[]byte A}, {uint64 B}, {uint64 C}]
 * Pushes to stack: [ ...stack, []byte]
 */
export declare class SetByte extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
/**
 * pop a byte-array A and integer B. Extract the Bth byte of A and push it as an integer
 * Pops from stack: [ ...stack, {[]byte A}, {uint64 B} ]
 * Pushes to stack: [ ...stack, uint64 ]
 */
export declare class GetByte extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Dig extends Op {
    readonly line: number;
    readonly depth: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [ depth ] // slot to duplicate
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Select extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
/**
 * push field F of the Ath transaction (A = top of stack) in the current group
 * pops from stack: [...stack, uint64]
 * pushes to stack: [...stack, transaction field]
 * NOTE: "gtxns field" is equivalent to "gtxn _i_ field" (where _i_ is the index
 * of transaction in group, fetched from stack).
 * gtxns exists so that i can be calculated, often based on the index of the current transaction.
 */
export declare class Gtxns extends Gtxn {
    /**
     * Sets `field`, `txIdx` values according to arguments passed.
     * @param args Expected arguments: [transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * push Ith value of the array field F from the Ath (A = top of stack) transaction in the current group
 * pops from stack: [...stack, uint64]
 * push to stack [...stack, value of field]
 */
export declare class Gtxnsa extends Gtxna {
    /**
     * Sets `field`(Transaction Field), `idx`(Array Index) values according to arguments passed.
     * @param args Expected arguments: [transaction field(F), transaction field array index(I)]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * get minimum required balance for the requested account specified by Txn.Accounts[A] in microalgos.
 * NOTE: A = 0 represents tx.sender account. Required balance is affected by ASA and App usage. When creating
 * or opting into an app, the minimum balance grows before the app code runs, therefore the increase
 * is visible there. When deleting or closing out, the minimum balance decreases after the app executes.
 * pops from stack: [...stack, uint64(account index)]
 * push to stack [...stack, uint64(min balance in microalgos)]
 */
export declare class MinBalance extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts if arguments length is zero
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter Interpreter Object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/** TEALv4 Ops **/
export declare class Gload extends Op {
    readonly scratchIndex: number;
    txIndex: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores scratch space index and transaction index number according to arguments passed.
     * @param args Expected arguments: [index number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Gloads extends Gload {
    /**
     * Stores scratch space index number according to argument passed.
     * @param args Expected arguments: [index number]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * Provide subroutine functionality. When callsub is called, the current location in
 * the program is saved and immediately jumps to the label passed to the opcode.
 * Pops: None
 * Pushes: None
 * The call stack is separate from the data stack. Only callsub and retsub manipulate it.
 * Pops: None
 * Pushes: Pushes current instruction index in call stack
 */
export declare class Callsub extends Op {
    readonly interpreter: Interpreter;
    readonly label: string;
    readonly line: number;
    /**
     * Sets `label` according to arguments passed.
     * @param args Expected arguments: [label of branch]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * When the retsub opcode is called, the AVM will resume
 * execution at the previous saved point.
 * Pops: None
 * Pushes: None
 * The call stack is separate from the data stack. Only callsub and retsub manipulate it.
 * Pops: index from call stack
 * Pushes: None
 */
export declare class Retsub extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * @param args Expected arguments: []
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class ByteOp extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack, op: MathOp): void;
}
export declare class ByteAdd extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteSub extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteMul extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteDiv extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteMod extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteGreatorThan extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteLessThan extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteGreaterThanEqualTo extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteLessThanEqualTo extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteEqualTo extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteNotEqualTo extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteBitwiseOr extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteBitwiseAnd extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteBitwiseXor extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteBitwiseInvert extends ByteOp {
    execute(stack: TEALStack): void;
}
export declare class ByteZero extends ByteOp {
    execute(stack: TEALStack): void;
}
/**
 * Pop four uint64 values. The deepest two are interpreted
 * as a uint128 dividend (deepest value is high word),
 * the top two are interpreted as a uint128 divisor.
 * Four uint64 values are pushed to the stack.
 * The deepest two are the quotient (deeper value
 * is the high uint64). The top two are the remainder, low bits on top.
 * Pops: ... stack, {uint64 A}, {uint64 B}, {uint64 C}, {uint64 D}
 * Pushes: ... stack, uint64, uint64, uint64, uint64
 */
export declare class DivModw extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Exp extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Expw extends Exp {
    execute(stack: TEALStack): void;
}
export declare class Shl extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Shr extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Sqrt extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Gaid extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    txIndex: number;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Gaids extends Gaid {
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: []
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Extract extends Op {
    readonly line: number;
    readonly start: number;
    length: number;
    /**
     * Asserts 2 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Extract3 extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
declare class ExtractUintN extends Op {
    readonly line: number;
    extractBytes: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class ExtractUint16 extends ExtractUintN {
    extractBytes: number;
    execute(stack: TEALStack): void;
}
export declare class ExtractUint32 extends ExtractUintN {
    extractBytes: number;
    execute(stack: TEALStack): void;
}
export declare class ExtractUint64 extends ExtractUintN {
    extractBytes: number;
    execute(stack: TEALStack): void;
}
export declare class EcdsaVerify extends Op {
    readonly line: number;
    readonly curveIndex: number;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    /**
     * The 32 byte Y-component of a public key is the last element on the stack,
     * preceded by X-component of a pubkey, preceded by S and R components of a
     * signature, preceded by the data that is fifth element on the stack.
     * All values are big-endian encoded. The signed data must be 32 bytes long,
     * and signatures in lower-S form are only accepted.
     */
    execute(stack: TEALStack): void;
}
export declare class EcdsaPkDecompress extends Op {
    readonly line: number;
    readonly curveIndex: number;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    /**
     * The 33 byte public key in a compressed form to be decompressed into X and Y (top)
     * components. All values are big-endian encoded.
     */
    execute(stack: TEALStack): void;
}
export declare class EcdsaPkRecover extends Op {
    readonly line: number;
    readonly curveIndex: number;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [txIndex]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    /**
    * S (top) and R elements of a signature, recovery id and data (bottom) are
    * expected on the stack and used to deriver a public key. All values are
    * big-endian encoded. The signed data must be 32 bytes long.
    */
    execute(stack: TEALStack): void;
}
export declare class Cover extends Op {
    readonly line: number;
    readonly nthInStack: number;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [N]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Uncover extends Op {
    readonly line: number;
    readonly nthInStack: number;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [N]
     * @param line line number in TEAL file
     */
    constructor(args: string[], line: number);
    execute(stack: TEALStack): void;
}
export declare class Loads extends Load {
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: []
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Stores extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores index number according to arguments passed
     * @param args Expected arguments: []
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class ITxnBegin extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores index number according to arguments passed
     * @param args Expected arguments: []
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class ITxnField extends Op {
    readonly field: string;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Set transaction field according to arguments passed
     * @param args Expected arguments: [transaction field]
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class ITxnSubmit extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Stores index number according to arguments passed
     * @param args Expected arguments: []
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class ITxn extends Op {
    readonly field: string;
    readonly idx: number | undefined;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Set transaction field according to arguments passed
     * @param args Expected arguments: [transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class ITxna extends Op {
    readonly field: string;
    readonly idx: number;
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Sets `field` and `idx` values according to arguments passed.
     * @param args Expected arguments: [transaction field, transaction field array index]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * txnas F:
 * push Xth value of the array field F of the current transaction
 * pops from stack: [...stack, uint64]
 * pushes to stack: [...stack, transaction field]
 */
export declare class Txnas extends Txna {
    /**
     * Sets `field`, `txIdx` values according to arguments passed.
     * @param args Expected arguments: [transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * gtxnas T F:
 * push Xth value of the array field F from the Tth transaction in the current group
 * pops from stack: [...stack, uint64]
 * push to stack [...stack, value of field]
 */
export declare class Gtxnas extends Gtxna {
    /**
     * Sets `field`(Transaction Field) and
     * `txIdx`(Transaction Group Index) values according to arguments passed.
     * @param args Expected arguments: [transaction group index, transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
/**
 * gtxnsas F:
 * pop an index A and an index B. push Bth value of the array
 * field F from the Ath transaction in the current group
 * pops from stack: [...stack, {uint64 A}, {uint64 B}]
 * push to stack [...stack, value of field]
 */
export declare class Gtxnsas extends Gtxna {
    /**
     * Sets `field`(Transaction Field)
     * @param args Expected arguments: [transaction field]
     * // Note: Transaction field is expected as string instead of number.
     * For ex: `Fee` is expected and `0` is not expected.
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Args extends Arg {
    /**
     * Gets the argument value from interpreter.args array.
     * store the value in _arg variable
     * @param args Expected arguments: none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class Log extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: TEALStack): void;
}
export declare class BitLen extends Op {
    readonly line: number;
    /**
     * Asserts 0 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
    */
    constructor(args: string[], line: number);
    execute(stack: Stack<StackElem>): void;
}
export declare class AppParamsGet extends Op {
    readonly interpreter: Interpreter;
    readonly line: number;
    readonly field: string;
    /**
     * Asserts 1 arguments are passed.
     * @param args Expected arguments: [] // none
     * @param line line number in TEAL file
     * @param interpreter interpreter object
     */
    constructor(args: string[], line: number, interpreter: Interpreter);
    execute(stack: Stack<StackElem>): void;
}
export {};
